{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"禅道bug管理系统","slug":"禅道bug管理系统","date":"2019-11-07T08:16:19.816Z","updated":"2019-11-07T08:16:46.644Z","comments":true,"path":"2019/11/07/禅道bug管理系统/","link":"","permalink":"http://yoursite.com/2019/11/07/%E7%A6%85%E9%81%93bug%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"禅道项目管理软件配置及使用教程一．禅道安装及运行禅道是一款开源项目管理软件。它集产品管理、项目管理、质量管理、文档管理、组织管理和事务管理于一体，是一款专业的研发项目管理软件，完整覆盖了研发项目管理的核心流程。 禅道将产品、项目、测试这三者的概念明确分开，产品人员、开发团队、测试人员，这三者分立，互相配合，又互相制约，通过需求、任务、bug来进行交相互动，最终通过项目拿到合格的产品。 1.禅道下载：Linux中可以用以下命令来下载安装包： 64位下载：wget http://dl.cnezsoft.com/zentao/9.0.1/ZenTaoPMS.9.0.1.zbox_64.tar.gz 2.Linux安装需要将安装包解压到/opt目录下。 命令如下：sudo tar -zxvf ZenTaoPMS.9.0.1.zbox_64.tar.gz -C /opt/ 解压后会在/opt下找到一个zbox目录，这就是禅道的安装目录。 通过命令进入 cd /opt/zbox/ 就可以看到已经安装好的目录结构。 3.启动禅道：在/opt/zbox目录下通过./zbox start命令就可以启动Apache和MySQL 4.在浏览器中访问： IP地址 登陆禅道 二．禅道组成结构 管理员admin功能：添加账号 维护账号 权限管理 三．禅道基本使用流程禅道管理软件中，核心的三种角色：产品、研发和测试，这三者之间通过需求进行协作，实现了研发管理中的三权分立。其中产品经理整理需求，研发团队实现任务，测试团队则保障质量，其三者的关系如下图： 基本流程如下： \\1. 产品经理创建产品 \\2. 产品经理在产品下创建需求 \\3. 项目经理创建项目 \\4. 项目经理确定项目要做的需求和任务 \\5. 项目经理分解任务，指派到研发人员。 \\6. 测试人员测试，提交bug。 四．产品管理功能禅道中的需求依附在产品下，新增产品以后才可以新增需求 然后在新增的产品下提需求和计划，可将产品分解为子模块A、模块B、模块C… 在提需求时针对该需求选择所属模块： 禅道专门提供了需求的变更流程。凡是对需求标题、描述、验证标准和附件的修改，都应该走变更流程。 可以查看需求变更之前的变化： 产品人员在动态一栏中可以看到该产品的全部变更过程： 由提需求时指定的评审人员评审需求，给出评审结果 评审人员确认需求通过后，需求状态改为激活，否则为草稿： 产品的需求可以导出文件或生成报表 新增产品–&gt;提需求–&gt;审核通过 新增产品–&gt;提需求–&gt;审核不通过–&gt;变更需求 五．项目功能管理\\1. 项目经理进入项目视图，添加项目 项目关联产品，即可选择关联该产品对应的某些需求 再为关联的需求分解任务，指派给某个人 \\2. 保存项目时，设置团队 需要选择是哪些成员可以参与到这个项目中，同时需要设置这个成员在本项目中的角色。 \\3. 在已建立好的项目下创建任务，将任务或关联的需求分解指派给项目组成员\\（任务类型务必准确选择）** \\4. 项目成员登录时，即可查看到分配给他的任务，成员只需要更新任务状态即可 可为项目关联的产品创建不同版本，并分别提交测试（提交源代码或附件）： 可以按各种属性查看到项目的状态及完成进度（下图为按任务类型查看）： 成员可按照不同属性查看项目中任务状态： 添加项目–&gt;关联产品–&gt;关联需求–&gt;设置团队–&gt;分解任务到团队成员–&gt;成员修改状态 添加项目–&gt;建任务–&gt;设置团队–&gt;分解任务到团队成员–&gt;成员修改状态 六．Bug\\管理****禅道里面设计的理念是bug主要附属在产品概念下面，有对应产品以后才可以开始提bug。默认Bug的严重程度分为四级，优先级分为五级（管理员可进行自定义）。 \\禅道里面缺陷处理的基本流程是：测试提交\\bug =&gt; *开发解决**bug =&gt;* *测试验证**bug =&gt;* *测试关闭**bu*g；** \\如果\\bug*验证没有通过，可以激活：测试提交**bug =&gt;* *开发解决**bug =&gt;* *测试验证**bug =&gt;* *测试激活**bug =&gt;* *开发解决**bug =&gt;* *测试验证* *=&gt;* *测试关闭。*** 在创建bug的时候，必填的字段是：影响版本，bug标题，重现步骤，所属模块。 创建bug的时候，可以直接指派给某一个研发人员去处理，他可以来验证解决这个bug。 当研发人员解决了bug之后，bug会重新指派到bug的创建者头上。这时候测试人员可以来验证这个bug是否已经修复。如果验证通过，则可以关闭该bug。 新增测试用例： B：是Bug的缩写，指该用例产生的Bug数。 R：是指该用例执行的结果数。 S：是指该用例的步骤数。 产品版本分为待测版本和已测版本，可分别关联测试用例： 测试用例运行失败可以直接保存为bug，指派给某研发人员进行调试。测试部分的用例和bug都可以自动导出为文档。 七．文档管理模板项目中有文档分类的模板，添加文档时可以此为参考（创建文档时不要忘记选择所属分类）","categories":[],"tags":[]},{"title":"阿里云利用docker安装 RabbitMQ","slug":"阿里云利用docker安装 RabbitMQ","date":"2019-10-10T09:23:55.870Z","updated":"2019-11-15T12:28:38.554Z","comments":true,"path":"2019/10/10/阿里云利用docker安装 RabbitMQ/","link":"","permalink":"http://yoursite.com/2019/10/10/%E9%98%BF%E9%87%8C%E4%BA%91%E5%88%A9%E7%94%A8docker%E5%AE%89%E8%A3%85%20RabbitMQ/","excerpt":"","text":"拉取镜像 1docker pull rabbitmq #创建新容器 运行 1docker run -d -p 5672:5672 --name myrabbit rabbitmq 进入容器 1docker container exec -it myrabbit /bin/bash 新增用户,rabbitmqctl list_users获取用户列表 1rabbitmqctl add_user username01 password01 2 # 这个用户名,密码在settings.py中使用 设置管理员 1rabbitmqctl set_user_tags username01 administrator 添加虚拟环境,使用”rabbitmqctl list_vhosts”获取添加过的虚拟环境; 1rabbitmqctl add_vhost myvhost # myvhost虚拟环境名称,同样在配置文件中需要使用 12设置权限:给这个用户所有权限rabbitmqctl set_permissions -p myvhost username01 \".*\" \".*\" \".*\" 退出后重启 ctrl+d 退出容器且关闭 ctrl+p+q 退出容器但不关闭 1docker restart myrabbit 配置完成 在settings.py中指定 消息队列的路径,和结果路径 2.5 版本以后 12BROKER_URL='amqp://hnq:123456@116.62.155.103:5672/myvhost'CELERY_RESULT_BACKEND='amqp://hnq:123456@116.62.155.103:5672/myvhost' 格式:’amqp://用户名:密码@IP:端口号/虚拟环境’ 在2.5 版本之前 1234BROKER_HOST=\"116.62.155.103\" #IP 2 BROKER_PORT=5672#端口号BROKER_USER=\"hnq\" #用户名BROKER_PASSWORD=\"123456\" #密码BROKER_VHOST=\"/myvhost\" #虚拟环境 1redis-server ./redis.conf #linux 启动redis 启动 阿里云上的redis123456789101112[root@iZbp1esh797fnbctu8kymhZ //]# find / -name redis/usr/local/python3/lib/python3.7/site-packages/redis/etc/selinux/targeted/tmp/modules/100/redis/etc/selinux/targeted/active/modules/100/redis^Z[1]+ 已停止 find / -name redis[root@iZbp1esh797fnbctu8kymhZ //]# find / -name redis.conf/home/soft/redis-4.0.2/redis.conf 在这个目录下用配置文件启动# 查找redis客户端find / -name redis-clifind / -name redis.conf 查找redis配置文件 12345$ docker ps // 查看所有正在运行容器 $ docker stop containerId // containerId 是容器的ID $ docker ps -a // 查看所有容器 $ docker ps -a -q // 查看所有容器ID $ docker stop $(docker ps -a -q) // stop停止所有容器 $ docker rm $(docker ps -a -q) // remove删除所有容器 或docker rm 容器名 12docker run -it --name redis-1 -v /root/redis.conf:/usr/local/etc/redis/redis.conf -d -p 6379:6379 redis /bin/bash# 容器成功启动后，会打印一个长串的容器ID","categories":[],"tags":[]},{"title":"阿里云服务器如何安装mongodb？","slug":"阿里云服务器如何安装mongodb","date":"2019-06-28T13:01:40.000Z","updated":"2019-11-15T12:28:32.581Z","comments":true,"path":"2019/06/28/阿里云服务器如何安装mongodb/","link":"","permalink":"http://yoursite.com/2019/06/28/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85mongodb/","excerpt":"","text":"1.下载mongodb 1curl -O https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.9.tgz 2.解压 1tar zxvf mongodb-linux-x86_64-3.2.9.tgz 将解压过后的包移动到指定目录 1mv mongodb-linux-x86_64-3.2.9/ /usr/local/mongodb 4.创建数据文件夹和日志文件等 123mkdir -p /usr/local/mongodb/datatouch /usr/local/mongodb/mongod.logtouch /usr/local/mongodb/mongodb.conf 5.启动方式（2种） 1cd /usr/local/mongodb/bin （1）通过参数启动（通过mongodb客户端工具可直接访问） 1./mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/mongod.log --logappend --port=27017 --fork (2)mongodb非法关闭的时候若出现 about to fork child process, waiting until server is ready for connections 那么需要执行 1rm /data/mongodb/mongo.lock 命令 再执行 1./mongod --repair （命令修复） (2) 通过配置文件启动 首先进行配置 1vim /usr/local/mongodb/mongodb.conf 123456dbpath=/usr/local/mongodb/datalogpath=/usr/local/mongodb/mongod.loglogappend = true port = 27017 fork = true auth = true 加入后保存退出 1:wq 进入mongo的bin目录下 1cd /usr/local/mongodb/bin 再执行 1./mongod --config /usr/local/mongodb/mongodb.conf 启动过程如果出现端口占用则使用 命令查看端口占用情况 1ps aux | grep mongod (停止) 1./mongod -shutdown -dbpath=/usr/local/mongodb/data 6.配置安全组,开放端口 (27017,自定义TCP) 7.最后放开端口 /sbin/iptables -I INPUT -p tcp –dport 27017 -j ACCEPT 在阿里云ECS里用python连接mongodb官网提供的免费实例2018.07.08 18:23:14字数 194阅读 304 上一篇我们已经能使用终端远程操作mongodb实例，这里我们使用python在自己的程序中来连接。 首先，根据官网提示，在python中我们使用以下代码可以连接： client=pymongo.MongoClient(“mongodb+srv://kay:myRealPassword@cluster0.mongodb.net/test”)db=client.test 把其中的kay:myRealPassword改成自己设定的 用户名:密码即可 但是我写入后，运行python，提示： The “dnspython” module must be installed to use mongodb+srv:// URIs 看来是少安装了一个包，于是果断 sudo pip install dnspython 再次运行即可进行连接。 对于不同语言，也有不同的连接命令，这个就等今后需要的时候再慢慢发掘了 https://blog.csdn.net/matthewwu/article/details/93733458 本地django连接阿里云mongo 增加数据12345678910111213141516171819202122232425262728293031323334353637383940#添加课程评论import pymongoclass AddComment(APIView): def post(self, request): mes=&#123;&#125; data = request.data.copy() print(data) try: pid=int(data['pid']) except: pid=0 # 通过pic构造top_id，type_id if pid == 0: type_id = 1 top_id = 0 else: comment = models.Comment.objects.get(id=pid) type_id = comment.type_id + 1 if comment.top_id==0: top_id = comment.id else: top_id = comment.top_id data['status'] = 1 data['pid'] = pid data['top_id'] = top_id data['type_id'] = type_id data['reason'] = '请使用文明用语' data['comment_type'] = 'python' print(data) client = pymongo.MongoClient(\"47.96.238.24\", 27017) #建立连接 db = client['onlineEducation'] # 创建库 comm = db['comment'] # 创建集合 comm.insert_one(data) #插入数据 mes['code'] = 200 mes['message']='添加评论成功' return Response(mes)","categories":[],"tags":[]},{"title":"单例模式,工厂模式,发布订阅模式","slug":"单例模式-工厂模式-发布订阅模式","date":"2019-04-17T11:03:50.000Z","updated":"2019-11-17T11:10:48.729Z","comments":true,"path":"2019/04/17/单例模式-工厂模式-发布订阅模式/","link":"","permalink":"http://yoursite.com/2019/04/17/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"单例模式​ 确保一个类最多只有一个实例，并提供一个全局访问点单例模式只生成一个实例对象，减少了对系统资源的开销，单一个对象的产生需要比较多的资源，如读取配置文件、产生其他依赖对象时， 可以产生一个“单例对象”，然后永久驻留内存中，从而极大的降低开销。 建立数据库连接 12341.什么是单例模式``# 1. 确保有且只有一个对象被创建``# 2. 为对象提供一个访问点,以使程序可以全局访问该对象``# 3. 控制共享资源的并行访问 123456789101112# #单例模式class Singleton(object): def __new__(cls): if not hasattr(cls, 'instance'): cls.instance = super(Singleton, cls).__new__(cls) return cls.instances = Singleton()print(\"Object created\", s)s1 = Singleton()print(\"Object created\", s1) ###工厂模式 1234567891011121314151617181920212223class CarFactory: def create_car(self, brand): if brand == \"奔驰\": return Benz() elif brand == \"宝马\": return BMW() elif brand == \"比亚迪\": return BYD() else: return \"未知品牌，无法创建\"class Benz: passclass BMW: passclass BYD: passfactory = CarFactory()c1 = factory.create_car(\"奔驰\")c2 = factory.create_car(\"宝马\")print(c1)print(c2) 三、策略模式策略指的就是为了达到某一目的而采取的多种手段或者方法。 为了实现软件设计，对象可能会用到多种多样的算法(逻辑)。这些算法甚至会经常改变。如果将这些算法都硬编码到对象中，将会使得对象本身变得臃肿不堪， 策略模式很好的实现了将算法与本身对象解耦，从而避免出现上述的问题。 因此策略模式可以定义为： 定义一系列算法(逻辑)，将每一个算法封装起来(一个算法创建一个类)，并让它们可以相互替换。此模式让算法的变化,不会影响到使用算法的客户. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# 抽象策略类class MsgSender(object): type = '' # 通知方式,用来保存电话号码或者邮箱地址 info = '' # 保存通知的内容 def send(self): pass # 具体策略类class PhoneSend(MsgSender): def send(self): print('给&#123;&#125;打电话说:&#123;&#125;'.format(self.type, self.info)) # 具体策略类class EmailSend(MsgSender): def send(self): print('给&#123;&#125;发邮件内容:&#123;&#125;'.format(self.type, self.info)) # 环境类class Customer(object): name = '' tel = '' email = '' send_way = None # 设置发送方式 def set_send_way(self, send_way): self.send_way = send_way def send_msg(self): self.send_way.send() if __name__ == '__main__': # 创建用户，添加信息 customer = Customer() customer.name = '六六' customer.tel = '111' customer.email = '555@' # 打电话通知 phone_send = PhoneSend() customer.set_send_way(phone_send) phone_send.type = customer.name phone_send.info = '你迟到了！罚款200元' customer.send_msg() # 给六六打电话说:你迟到了！罚款200元 # 发短信 email_send = EmailSend() customer.set_send_way(email_send) email_send.type = customer.name email_send.info = '你迟到了！罚款200元' customer.send_msg() # 给六六发邮件内容:你迟到了！罚款200元 四.发布订阅模式熟悉消息中间件的同学应该对发布/订阅模式(Publish Subscribe Pattern)并不陌生。即使你不了解消息中间件，那么在平时生活中发布/订阅模式也是非常常见的场景。 比如你打开你的微信订阅号，你订阅的作者发布的文章，会广播给每个订阅者。在这个场景里，微信公众号就是一个Pulisher，而你就是一个Subscriber，你收到的文章就是一个Message。 下面我们就一起了解一下发布/订阅模式，如果你要了解并在自己的项目中使用这个模式，或者你对消息队列(MQ)等中间件的原理感兴趣，那么这个系列的文章就是最高效地深入浅出宝典。 模式介绍发布/订阅模式(Publish Subscribe Pattern)属于设计模式中的行为(Behavioral Patterns)。 在软件架构中，发布/订阅是一种消息范式，消息的发送者（称为发布者）不会将消息直接发送给特定的接收者（称为订阅者），而是通过消息通道广播出去，让订阅改消息主题的订阅者消费到。 发布/订阅者模式最大的特点就是实现了松耦合，也就是说你可以让发布者发布消息、订阅者接受消息，而不是寻找一种方式把两个分离的系统连接在一起。当然这种松耦合也是发布/订阅者模式最大的缺点，因为需要中间的代理，增加了系统的复杂度。而且发布者无法实时知道发布的消息是否被每个订阅者接收到了，增加了系统的不确定性。 发布/订阅者模式的优点发布/订阅者模式的优点可以归纳为: 松耦合/Independence发布/订阅者模式可以将众多需要通信的子系统(Subsystem)解耦，每个子系统都可以独立管理。而且即使部分子系统下线了，也不会影响系统消息的整体管理。 发布/订阅者模式为应用程序提供了关注点分离。每个应用程序都可以专注于其核心功能，而消息传递基础结构负责将消息路由到每个消费者手里。 高伸缩性/Scalability发布/订阅者模式增加了系统的可伸缩性，并提高了发送者的响应能力。原因是发送方(Publisher)可以快速地向输入通道发送一条消息，然后返回到其核心处理职责，而不必等待子系统处理完成。然后消息传递的基础结构负责确保把消息传递到每个订阅者(Subscriber)手里。 高可靠性/Reliability发布/订阅者模式提高了可靠性。异步的消息传递有助于应用程序在增加的负载下继续平稳运行，并且可以更有效地处理间歇性故障。 灵活性/Flexibility你不需要关心不同的组件是如何组合在一起的，只要他们共同遵守一份协议即可。 发布/订阅者模式允许延迟处理或者按计划的处理。例如当系统负载大的时候，订阅者可以等到非高峰时间才接收消息，或者根据特定的计划处理消息。 可测试性/Testability发布/订阅者模式提高了可测试性。通道可以被监视，消息可以作为整体集成测试策略的一部分而被检查或记录。 实现发布/订阅者模式需要考虑的点订阅处理订阅者可以在消息通道中订阅或者取消订阅某个话题。 安全连接到任何消息通道必须受到安全策略的限制，以防止未经授权的用户或应用程序窃听。 内容筛选根据每条消息的内容检查和分发消息。每个订户都可以指定其感兴趣的内容。 订阅者通常只对发布者分发的消息的子集感兴趣。消息服务通常允许订户缩小以下用户接收到的消息集。 考虑允许订户通过通配符订阅多个主题。每个主题都有一个专用的输出通道，每个使用者都可以订阅所有相关主题。 双向通信发布订阅系统中的通道被视为单向的。 如果特定订户需要向发布服务器发送确认或通信状态，请考虑使用请求/回复模式。此模式使用一个通道向订阅服务器发送消息，以及一个单独的回复通道向发布服务器进行通信。 消息排序使用者实例接收消息的顺序不一定得到保证，也不一定反映消息的创建顺序。 设计该系统以确保消息处理是等量的，以帮助消除对消息处理顺序的任何依赖。 消息优先级有些解决方案可能需要按特定顺序处理消息。优先级队列模式提供了一种确保特定消息先于其他消息传递的机制。 有毒信息格式错误的消息或需要访问不可用资源的任务可能会导致服务实例失败。系统应防止此类消息返回到队列，否则可能导致系统故障。 消息重复同一消息可能会发送多次。例如，发送者可能在发布消息后出现了异常，没有记录自己已经成功发送了消息，然后，发送者的新实例可能会启动并重复该消息。 消息基础结构应基于消息ID实现重复消息检测和删除（也称为重复数据消除），以便最多提供一次消息传递。 消息过期消息的生命周期可能有限。如果在这段时间内没有处理，它可能不再有价值，应该丢弃。发送方可以指定过期时间作为消息中数据的一部分。在决定是否执行与消息关联的业务逻辑之前，接收者可以检查此信息，以确保消息没有过期。 消息调度例如，消息可能会被暂时禁止，直到特定的日期和时间才被处理。 何时应使用发布/订阅者模式如果你的程序只有很少的订阅者，或者需要与子系统进行实时的交互，那么发布/订阅者模式是不适合的。 在以下情况下可以考虑使用此模式： 应用程序需要向大量消费者广播信息。例如微信订阅号就是一个消费者量庞大的广播平台。应用程序需要与一个或多个独立开发的应用程序或服务通信，这些应用程序或服务可能使用不同的平台、编程语言和通信协议。应用程序可以向消费者发送信息，而不需要消费者的实时响应。被集成的系统被设计为支持其数据的最终一致性模型。应用程序需要将信息传递给多个消费者，这些消费者可能具有与发送者不同的可用性要求或正常运行时间计划。例如你消息在上午发布了出去，消费者计划在下午才去处理这些消息。 发布/订阅者模式与观察者模式发布/订阅者模式与观察者模式是我们经常混淆的两种设计模式，可以说两种设计模式在行为上有一定的相似性，但却是两种不同的设计模式。或者说发布/订阅者模式是观察者模式的一种变体。 通过下图可以清晰地看到两种设计模式的不同点。 发布/订阅者模式与观察者模式主要有以下几个不同点： 在观察者模式中，主体维护观察者列表，因此主体知道当状态发生变化时如何通知观察者。然而，在发布者/订阅者中，发布者和订阅者不需要相互了解。它们只需在中间层消息代理（或消息队列）的帮助下进行通信。在发布者/订阅者模式中，组件与观察者模式完全分离。在观察者模式中，主题和观察者松散耦合。观察者模式主要是以同步方式实现的，即当发生某些事件时，主题调用其所有观察者的适当方法。发布服务器/订阅服务器模式主要以异步方式实现（使用消息队列）。发布者/订阅者模式更像是一种跨应用程序模式。发布服务器和订阅服务器可以驻留在两个不同的应用程序中。它们中的每一个都通过消息代理或消息队列进行通信。本文介绍了发布者/订阅者模式的相关概念，后面几篇会详细介绍具体实现。","categories":[],"tags":[]},{"title":"Redis","slug":"redis全解","date":"2018-10-25T12:03:40.000Z","updated":"2019-11-15T14:04:08.899Z","comments":true,"path":"2018/10/25/redis全解/","link":"","permalink":"http://yoursite.com/2018/10/25/redis%E5%85%A8%E8%A7%A3/","excerpt":"","text":"Redis Redis 简介Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。 Redis 与其他 key - value 缓存产品有以下三个特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。 Redis 优势 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。 丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 Redis 数据类型 String字符串：格式: set key value string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。 string类型是Redis最基本的数据类型，一个键最大能存储512MB。 使用场景 缓存：将数据以字符串方式存储 计数器功能：比如视频播放次数，点赞次数。 共享session：数据共享的功能，redis作为单独的应用软件用来存储一些共享数据供多个实例访问。 Hash（哈希）格式: hmset name key1 value1 key2 value2 Redis hash 是一个键值(key=&gt;value)对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 123456789101112hset key field valuehsetnx key field value //与setnx命令一样，不存在则设置值，用于添加，作用在field上面hget key field //获取值hdel key field // 删除值hlen key //子酸field的个数hmset key field value [filed value] //批量设置field-valuehexists key field //判断filed是否存在hkeys key //获取所有的fieldhvals key //获取所有的valuehgetall key //获取所有的field-value ，如果元素数较多会存在阻塞redis的可能hincreby key filed ##### 使用场景 + 和字符串很像，基本上redis对字符串操作的命令,Redis的Hash一般也存在，不过在命令前多个一个h。 + 一些关系型数据库中不是特别复杂的表，也无需复杂的关系查询，可以使用Redis的Hash来存储，也可以用Hash做表数据缓存。 List（列表）Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边） 1234567891011121314rpush key value [value...] //从右插入元素lpush key value [value...] //从左边插入元素lrange key start end //获取指定范围的元素列表lindex key index //获取列表指定索引下标的元素llen key //获取列表的长度lpop key // 从列表左侧弹出元素rpop key // 从列表右侧弹出元素lrem key count value //从列表中找到等于value的元素，并进行删除，根据count的不同有不同的情况lset key index newValue //修改指定索引下标的元素blpop key timeout //阻塞式左弹出keybrpop key timeout //阻塞式右弹出key ##### 使用场景： - 消息队列：我们公司就是使用redis做消息队列，lpush + brpop或rpop命令，实现先进先出，如果消费失败客户端把key再放回去，消费成功真的remove掉 Set（集合）集合是用来保存多个字符串的元素，内部不允许有重复远古三，集合内的元素是无序的，Redis支持集合的增删改查，同时支持多个集合取交集，并集，差集 1234567891011sadd key value [value...] //添加元素srem key value [value...] //删除元素scard key //计算元素的个数sismember key value //判断元素是否在集合中srandmember key [count] //随机从集合中返回指定个数的元素，不写默认为1spop key //从集合随机取出元素smembers key //获取集合内的所有元素sinter key1 key2 //求集合的交集sunion key1 key2 //求集合的并集sdiff key1 key2 //求集合的差集 Redis的Set是string类型的无序集合。 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 应用场景 标签 zset(sorted set：有序集合)它保留了元素不能重复的特性，并且元素是有序的。 格式: zadd name score value Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。 zset的成员是唯一的,但分数(score)却可以重复。 12345678910111213141516zadd key score member //score是可以重复的，添加key的时候指定分数zcard key //计算成员个数zscore key member //计算某个成员的分数zrank key member //计算成员排名，从低到高zrevrank key member //计算成员排名，从高到低zrem key member [member...] //删除成员zincrby key increnment member //增加成员的分数zrange key start end [withscores] //从低到高返回指定排名的分数zrevrange key start end [withscores] //从高到低返回zrangebyscore key min max [withscores] [limit offset count] //按照分数从低到高返回zrevrange score key min max [withscores] [limit offset count] //按照分数从高到低返回成员withscore 代表返回的时候带上成员的分数...还有求交集，并集等操作 ##### 使用场景 + 排行榜，目前公司的飙车榜用的是redis的有序集合，返回前面排名的元素之后再使用redis的mget命令获取获取到的key信息。 redis数据库的常见问题？ 什么是Redis持久化？Redis有哪几种持久化方式？优缺点是什么？ 持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。 Redis 提供了两种持久化方式:RDB（默认） 和AOF RDB： rdb是Redis DataBase缩写 (快照) 功能核心函数rdbSave(生成RDB文件)和rdbLoad（从文件加载内存）两个函数 AOF: Aof是Append-only file缩写 每当执行服务器(定时)任务或者函数时flushAppendOnlyFile 函数都会被调用， 这个函数执行以下两个工作 aof写入保存： WRITE：根据条件，将 aof_buf 中的缓存写入到 AOF 文件 SAVE：根据条件，调用 fsync 或 fdatasync 函数，将 AOF 文件保存到磁盘中。 存储结构: 内容是redis通讯协议(RESP )格式的命令文本存储。 比较： 1、aof文件比rdb更新频率高，优先使用aof还原数据。 2、aof比rdb更安全也更大 3、rdb性能比aof好 4、如果两个都配了优先加载AOF 07.单机版 特点：简单 问题： 1、内存容量有限 2、处理能力有限 3、无法高可用。 主从复制 Redis 的复制（replication）功能允许用户根据一个 Redis 服务器来创建任意多个该服务器的复制品，其中被复制的服务器为主服务器（master），而通过复制创建出来的服务器复制品则为从服务器（slave）。 只要主从服务器之间的网络连接正常，主从服务器两者会具有相同的数据，主服务器就会一直将发生在自己身上的数据更新同步 给从服务器，从而一直保证主从服务器的数据相同。 特点： 1、master/slave 角色 2、master/slave 数据相同 3、降低 master 读压力在转交从库 问题： 无法保证高可用 没有解决 master 写的压力 哨兵 Redis sentinel 是一个分布式系统中监控 redis 主从服务器，并在主服务器下线时自动进行故障转移。其中三个特性： 监控（Monitoring）： Sentinel 会不断地检查你的主服务器和从服务器是否运作正常。 提醒（Notification）： 当被监控的某个 Redis 服务器出现问题时， Sentinel 可以通过 API 向管理员或者其他应用程序发送通知。 自动故障迁移（Automatic failover）： 当一个主服务器不能正常工作时， Sentinel 会开始一次自动故障迁移操作。 特点： 1、保证高可用 2、监控各个节点 3、自动故障迁移 缺点：主从模式，切换需要时间丢数据 没有解决 master 写的压力 redis哨兵模式和高可用集群解析 https://www.cnblogs.com/bingshu/p/9776610.html 08. 使用过Redis分布式锁么，它是怎么实现的？ 先拿setnx来争抢锁，抢到之后，再用expire给锁加一个过期时间防止锁忘记了释放。 如果在setnx之后执行expire之前进程意外crash或者要重启维护了，那会怎么样？ ​ set指令有非常复杂的参数，这个应该是可以同时把setnx和expire合成一条指令来用的！ 09. 使用过Redis做异步队列么，你是怎么用的？有什么缺点？ ​ 一般使用list结构作为队列，rpush生产消息，brpop消费消息。当lpop没有消息的时候，要适当sleep一会再重试。 ​ 缺点： ​ 在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如rabbitmq等。 能不能生产一次消费多次呢？ 使用pub/sub主题订阅者模式，可以实现1:N的消息队列。 10 什么是缓存穿透？如何避免？什么是缓存雪崩？何如避免？ 缓存穿透 ​ 一般的缓存系统，都是按照key去缓存查询，如果不存在对应的value，就应该去后端系统查找（比如DB）。一些恶意的请求会故意查询不存在的key,请求量很大，就会对后端系统造成很大的压力。这就叫做缓存穿透。 ​ 如何避免？ ​ 1：对查询结果为空的情况也进行缓存，缓存时间设置短一点，或者该key对应的数据insert了之后清理缓存。 ​ 2：对一定不存在的key进行过滤。可以把所有的可能存在的key放到一个大的Bitmap中，查询时通过该bitmap过滤。 缓存雪崩 ​ 当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，会给后端系统带来很大压力。导致系统崩溃。 如何避免？ ​ 1：在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。 ​ 2：做二级缓存，A1为原始缓存，A2为拷贝缓存，A1失效时，可以访问A2，A1缓存失效时间设置为短期，A2设置为长期 ​ 3：不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。","categories":[],"tags":[]},{"title":"前端开发最全面试题","slug":"前端开发最全面试题","date":"2018-09-30T10:13:33.000Z","updated":"2019-11-07T14:36:15.327Z","comments":true,"path":"2018/09/30/前端开发最全面试题/","link":"","permalink":"http://yoursite.com/2018/09/30/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%9C%80%E5%85%A8%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"","text":"前端问题记录 HTML相关 CSS相关 JAVASCRIPT相关 DOM相关 HTTP相关 VUE相关 算法相关 网络安全相关 webpack相关 其他Html相关1 html语义化意义：根据内容的结构化（内容语义化），选择合适的标签（代码语义化）便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好地解析。注意： 尽可能少的使用无语义的标签div和span； 在语义不明显时，既可以使用div或者p时，尽量用p, 因为p在默认情况下有上下间距，对兼容特殊终端有利； 不要使用纯样式标签，如：b、font、u等，改用css设置。 需要强调的文本，可以包含在strong或者em标签中（浏览器预设样式，能用CSS指定就不用他们），strong默认样式是加粗（不要用b），em是斜体（不用i）； 使用表格时，标题要用caption，表头用thead，主体部分用tbody包围，尾部用tfoot包围。表头和一般单元格要区分开，表头用th，单元格用td； 表单域要用fieldset标签包起来，并用legend标签说明表单的用途； 每个input标签对应的说明文本都需要使用label标签，并且通过为input设置id属性，在lable标签中设置for=someld来让说明文本和相对应的input关联起来。 新标签： 2 meta viewport相关1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt; H5标准声明，使用 HTML5 doctype，不区分大小写&lt;head lang=”en”&gt; 标准的 lang 属性写法&lt;meta charset=’utf-8′&gt; 声明文档使用的字符编码&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge,chrome=1″/&gt; 优先使用 IE 最新版本和 Chrome&lt;meta name=”description” content=”不超过150个字符”/&gt; 页面描述&lt;meta name=”keywords” content=””/&gt; 页面关键词&lt;meta name=”author” content=”name, email@gmail.com”/&gt; 网页作者&lt;meta name=”robots” content=”index,follow”/&gt; 搜索引擎抓取&lt;meta name=”viewport” content=”initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no”&gt; 为移动设备添加 viewport&lt;meta name=”apple-mobile-web-app-title” content=”标题”&gt; iOS 设备 begin&lt;meta name=”apple-mobile-web-app-capable” content=”yes”/&gt; 添加到主屏后的标题（iOS 6 新增）是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏&lt;meta name=”apple-itunes-app” content=”app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL”&gt;添加智能 App 广告条 Smart App Banner（iOS 6+ Safari）&lt;meta name=”apple-mobile-web-app-status-bar-style” content=”black”/&gt;&lt;meta name=”format-detection” content=”telphone=no, email=no”/&gt; 设置苹果工具栏颜色&lt;meta name=”renderer” content=”webkit”&gt; 启用360浏览器的极速模式(webkit)&lt;meta http-equiv=”X-UA-Compatible” content=”IE=edge”&gt; 避免IE使用兼容模式&lt;meta http-equiv=”Cache-Control” content=”no-siteapp” /&gt; 不让百度转码&lt;meta name=”HandheldFriendly” content=”true”&gt; 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓&lt;meta name=”MobileOptimized” content=”320″&gt; 微软的老式浏览器&lt;meta name=”screen-orientation” content=”portrait”&gt; uc强制竖屏&lt;meta name=”x5-orientation” content=”portrait”&gt; QQ强制竖屏&lt;meta name=”full-screen” content=”yes”&gt; UC强制全屏&lt;meta name=”x5-fullscreen” content=”true”&gt; QQ强制全屏&lt;meta name=”browsermode” content=”application”&gt; UC应用模式&lt;meta name=”x5-page-mode” content=”app”&gt; QQ应用模式&lt;meta name=”msapplication-tap-highlight” content=”no”&gt; windows phone 点击无高光设置页面不缓存&lt;meta http-equiv=”pragma” content=”no-cache”&gt;&lt;meta http-equiv=”cache-control” content=”no-cache”&gt;&lt;meta http-equiv=”expires” content=”0″&gt; 3 canvas 相关1234567使用前需要获得上下文环境，暂不支持3d常用api: 1.fillRect(x,y,width,height)实心矩形 2.strokeRect(x,y,width,height)空心矩形 3.fillText(\"Hello world\",200,200);实心文字 4.strokeText(\"Hello world\",200,300)空心文字各种东西！！！ 新标签兼容低版本 ie9之前版本通过createElement创建html5新标签 引入html5shiv.jsCSS相关1.盒模型 ie盒模型算上border、padding及自身（不算margin），标准的只算上自身窗体的大小css设置方法如下1234/* 标准模型 */box-sizing:content-box; /*IE模型*/box-sizing:border-box; margin、border、padding、content由外到里 几种获得宽高的方式 dom.style.width/height 这种方式只能取到dom元素内联样式所设置的宽高，也就是说如果该节点的样式是在style标签中或外联的CSS文件中设置的话，通过这种方法是获取不到dom的宽高的。 dom.currentStyle.width/height 这种方式获取的是在页面渲染完成后的结果，就是说不管是哪种方式设置的样式，都能获取到。但这种方式只有IE浏览器支持。 window.getComputedStyle(dom).width/height 这种方式的原理和2是一样的，这个可以兼容更多的浏览器，通用性好一些。 dom.getBoundingClientRect().width/height 这种方式是根据元素在视窗中的绝对位置来获取宽高的 dom.offsetWidth/offsetHeight 这个就没什么好说的了，最常用的，也是兼容最好的。 4.拓展 各种获得宽高的方式 获取屏幕的高度和宽度（屏幕分辨率）：window.screen.height/width 获取屏幕工作区域的高度和宽度（去掉状态栏）：window.screen.availHeight/availWidth 网页全文的高度和宽度：document.body.scrollHeight/Width 滚动条卷上去的高度和向右卷的宽度：document.body.scrollTop/scrollLeft 网页可见区域的高度和宽度（不加边线）：document.body.clientHeight/clientWidth 网页可见区域的高度和宽度（加边线）：document.body.offsetHeight/offsetWidth 5.边距重叠解决方案(BFC)BFC原理 内部的box会在垂直方向，一个接一个的放置每个元素的margin box的左边，与包含块border box的左边相接触（对于从做往右的格式化，否则相反） box垂直方向的距离由margin决定，属于同一个bfc的两个相邻box的margin会发生重叠 bfc的区域不会与浮动区域的box重叠 bfc是一个页面上的独立的容器，外面的元素不会影响bfc里的元素，反过来，里面的也不会影响外面的 计算bfc高度的时候，浮动元素也会参与计算创建bfc float属性不为none（脱离文档流） position为absolute或fixed display为inline-block,table-cell,table-caption,flex,inine-flex overflow不为visible 根元素demo1234567891011&lt;section class=\"top\"&gt; &lt;h1&gt;上&lt;/h1&gt; 这块margin-bottom:30px;&lt;/section&gt;&lt;!-- 给下面这个块添加一个父元素，在父元素上创建bfc --&gt;&lt;div style=\"overflow:hidden\"&gt; &lt;section class=\"bottom\"&gt; &lt;h1&gt;下&lt;/h1&gt; 这块margin-top:50px; &lt;/section&gt;&lt;/div&gt; css reset 和 normalize.css 有什么区别 两者都是通过重置样式，保持浏览器样式的一致性 前者几乎为所有标签添加了样式，后者保持了许多浏览器样式，保持尽可能的一致 后者修复了常见的桌面端和移动端浏览器的bug：包含了HTML5元素的显示设置、预格式化文字的font-size问题、在IE9中SVG的溢出、许多出现在各浏览器和操作系统中的与表单相关的bug。 前者中含有大段的继承链 后者模块化，文档较前者来说丰富居中方法水平方向上1234针对inline, 内联块inline-block, 内联表inline-table, inline-flex元素及img,span,button等元素.text_div&#123; text-align:center;&#125; 1234不定宽块状元素居中.text_div&#123; margin:0 auto;&#125; 12345678910通过给父元素设置 float，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。.wrap&#123; float:left; position:relative; left:50%; clear:both;&#125;.wrap-center&#123; left:-50%;&#125; 垂直居中1234567单行内联(inline-)元素垂直居中 通过设置内联元素的高度(height)和行高(line-height)相等，从而使元素垂直居中。.text_div&#123; height: 120px; line-height: 120px;&#125; 12345678利用表布局.father &#123; display: table;&#125;.children &#123; display: table-cell; vertical-align: middle;&#125; 123456flex布局.center-flex &#123; display: flex; flex-direction: column;//上下排列 justify-content: center;&#125; 1234567891011121314151617181920绝对布局方式已知高度.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; height: 100px; margin-top: -50px; &#125;未知高度.parent &#123; position: relative;&#125;.child &#123; position: absolute; top: 50%; transform: translateY(-50%);&#125; 垂直水平居中根据上方结合1234567891011121314flex方式.parent &#123; display: flex; justify-content: center; align-items: center;&#125;grid方式.parent &#123; height: 140px; display: grid;&#125;.child &#123; margin: auto;&#125; css优先级确定 每个选择器都有权值，权值越大越优先 继承的样式优先级低于自身指定样式 ！important优先级最高 js也无法修改 权值相同时，靠近元素的样式优先级高 顺序为内联样式表（标签内部）&gt; 内部样式表（当前文件中）&gt; 外部样式表（外部文件中）bfc内容见盒模型如何清除浮动不清楚浮动会发生高度塌陷：浮动元素父元素高度自适应（父元素不写高度时，子元素写了浮动后，父元素会发生高度塌陷） clear清除浮动（添加空div法）在浮动元素下方添加空div,并给该元素写css样式： {clear:both;height:0;overflow:hidden;} 给浮动元素父级设置高度 父级同时浮动（需要给父级同级元素添加浮动） 父级设置成inline-block，其margin: 0 auto居中方式失效 利用br标签的clear属性 给父级添加overflow:hidden 清除浮动方法 万能清除法 after伪类 清浮动（现在主流方法，推荐使用）1234567891011.float_div:after&#123; content:\".\"; clear:both; display:block; height:0; overflow:hidden; visibility:hidden;&#125;.float_div&#123; zoom:1&#125; 自适应布局思路： 左侧浮动或者绝对定位，然后右侧margin撑开 使用div包含，然后靠负margin形成bfc 使用flex画三角形123456789#item &#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-top: 50px solid transparent; border-bottom: 50px solid blue; background: white;&#125; link @import导入css link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务；@import属于CSS范畴，只能加载CSS。 link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。 link无兼容问题；@import是在CSS2.1提出的，低版本的浏览器不支持。 ink支持使用Javascript控制DOM去改变样式；而@import不支持。animation长宽比方案 使用padding方式结合calc实现 长宽一项设置百分比另一项aspect-ratio实现（需借助插件实现）display相关 block:div等容器类型 inline:img span等行内类型 table系列：将样式变成table类型 flex:重点把握，非常强大 grid:同上 inline-block:可设置宽度，两者间有一点间隙 inherit:继承父级JavaScript相关1 [“1”, “2”, “3”].map(parseInt)123456789101112131415161718首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值其中回调函数接受三个参数 currentValue, index, arrary;而题目中, map只传入了回调函数--parseInt.其次, parseInt 只接受两个两个参数 string, radix(基数). 本题理解来说也就是key与 index 所以本题即问parseInt('1', 0);parseInt('2', 1);parseInt('3', 2);parseInt(string, radix)string 必需。要被解析的字符串。radix 可选。表示要解析的数字的基数。该值介于 2 ~ 36 之间。如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。 2 [[3,2,1].reduce(Math.pow), [].reduce(Math.pow)]12345arr.reduce(callback[, initialValue])reduce接受两个参数, 一个回调, 一个初始值.回调函数接受四个参数 previousValue, currentValue, currentIndex, array需要注意的是 If the array is empty and no initialValue was provided, TypeError would be thrown.所以第二个表达式会报异常. 第一个表达式等价于 Math.pow(3, 2) =&gt; 9; Math.pow(9, 1) =&gt;9 3123456789var ary = [0,1,2];ary[10] = 10;ary.filter(function(x) &#123; return x === undefined;&#125;);我们看到在迭代这个数组的时候, 首先检查了这个索引值是不是数组的一个属性, 那么我们测试一下.0 in ary; =&gt; true3 in ary; =&gt; false10 in ary; =&gt; true也就是说 从 3 - 9 都是没有初始化的bug !, 这些索引并不存在与数组中. 在 array 的函数调用的时候是会跳过这些坑的. 4 [typeof null, null instanceof Object]123456789101112typeof 返回一个表示类型的字符串.instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上.type resultUndefined \"undefined\"Null \"object\"Boolean \"boolean\"Number \"number\"String \"string\"Symbol \"symbol\"Host object Implementation-dependentFunction \"function\"Object \"object\" 5 js数据类型 number; 2.string; 3.boolean; 4.undefined; 5.null; 6.symbol（ES6新增，文章后面有对着新类型的解释）Symbol 生成一个全局唯一的值。 7.Object.（包括Object，Array，Function） 6 promise 用法123456789101112131415161718192021定义var promise = new Promise(function(resolve, reject) &#123; // ... some code if (/* 异步操作成功 */)&#123; resolve(value); &#125; else &#123; reject(error); &#125;&#125;);使用promise.then(function(value) &#123; // success&#125;, function(error) &#123; // failure&#125;);//等价于：promise.then(function()&#123; //success&#125;).catch(function()&#123; //failure&#125;) 7 es6 promise ajax123456789101112131415161718192021222324252627定义const myHttpClient = url =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; let client = new XMLHttpRequest(); client.open(\"GET\", url); client.onreadystatechange = handler; client.responseType = \"json\"; client.setRequestHeader(\"Accept\", \"application/json\"); client.send(); function handler() &#123; if (this.readyState !== 4) &#123; return; &#125; if (this.status === 200) &#123; resolve(this.response); &#125; else &#123; reject(new Error(this.statusText)); &#125; &#125; &#125;);&#125;;使用myHttpClient('https://www.baidu.com').then(res =&gt; &#123; console.log(res);&#125;).catch(error =&gt; &#123; console.log(error);&#125;); 8闭包1234567891011function foo(x) &#123; var tmp = 3; return function (y) &#123; alert(x + y + (++tmp)); &#125;&#125;var bar = foo(2); // bar 现在是一个闭包bar(10);结果是16es6通常用let const块级作用域代替，闭包缺点，ie中会引起内存泄漏，严格来说是ie的缺点不是闭包的问题 9 什么是立即执行函数？使用立即执行函数的目的是什么？1234567891011常见两种方式1.(function()&#123;...&#125;)() (function(x)&#123; console.log(x); &#125;)(12345)2.(function()&#123;...&#125;()) (function(x)&#123; console.log(x); &#125;(12345))作用 不破坏污染全局的命名空间，若需要使用，将其用变量传入如（function(window)&#123;...&#125;(window)） 10 async/await 语法123456789101112131415161718192021222324252627282930作用：异步代码的新方式promise示例const makeRequest = () =&gt; &#123; return getJSON() .then(data =&gt; &#123; if (data.needsAnotherRequest) &#123; return makeAnotherRequest(data) .then(moreData =&gt; &#123; console.log(moreData) return moreData &#125;) &#125; else &#123; console.log(data) return data &#125; &#125;)&#125;async/await示例const makeRequest = async () =&gt; &#123; const data = await getJSON() if (data.needsAnotherRequest) &#123; const moreData = await makeAnotherRequest(data); console.log(moreData) return moreData &#125; else &#123; console.log(data) return data &#125;&#125;函数前面多了一个aync关键字。await关键字只能用在aync定义的函数内。async函数会隐式地返回一个promise，该promise的reosolve值就是函数return的值。(示例中reosolve值就是字符串\"done\") 11 深浅拷贝12345678910111213141516171819202122let a = &#123; aa: 1, bb: 2, cc: 3, dd: &#123; ee: 5, &#125;, ff: &#123; gg: 6, &#125;&#125;;let d = JSON.parse(JSON.stringify(a));//深复制包含子对象let c = &#123;...a&#125;;//深拷贝单不包含子对象let b = a;//浅拷贝b.bb = 22;c.cc = 33;c.dd.ee = 55;d.ff.gg = 66;console.log(a);console.log(b);console.log(c);console.log(d); 12数组去重123456思路1：定义一个新数组，并存放原数组的第一个元素，然后将元素组一一和新数组的元素对比，若不同则存放在新数组中思路2：先将原数组排序，在与相邻的进行比较，如果不同则存入新数组。思路3：利用对象属性存在的特性，如果没有该属性则存入新数组。思路4（最常用）：使用es6 setlet arr= [1, 2, 3, 3, 5, 7, 2, 6, 8];console.log([...new Set(arr)]); 13正则实现trim()功能12345function myTrim(str) &#123; let reg = /^\\s+|\\s+$/g; return str.replace(reg, \"\");&#125;console.log(myTrim(' asdf ')); 14 JS原型121.每个对象都有 __proto__ 属性，但只有函数对象才有 prototype 属性2.个人粗略理解与python的类方法静态方法实例方法差不多 #####15 es6 class 1面向对象，java中类 16 JS 如何实现继承121.使用原型继承（既继承了父类的模板，又继承了父类的原型对象。优点是继承了父类的模板，又继承了父类的原型对象，缺点就是父类实例传参，不是子类实例化传参，不符合常规语言的写法）2.使用call的方式（继承了父类的模板，不继承了父类的原型对象。优点是方便了子类实例传参，缺点就是不继承了父类的原型对象） 17 手写jquery插件1234567891011(function ($) &#123; $.fn.myPlugins = function (options) &#123; //参数赋值 options = $.extend(defaults, options);//对象合并 this.each(function () &#123; //执行代码逻辑 &#125;); &#125;;&#125;)(jQuery);$(selector).myPlugins(&#123;参数&#125;); 18 数组合并去重排序12345let arr1 = [1, 25, 2, 26, 1234, 6, 213];let arr2 = [2, 6, 2134, 6, 31, 623];let c = [...new Set([...arr1, ...arr2])].sort((a, b) =&gt; &#123; return a - b;&#125;); 19 call apply作用：在函数调用时改变函数的执行上下文也就是this的值区别：call采用不定长的参数列表，而apply使用一个参数数组。性能优化图 20 for 中setTimeOut要为循环题创建不同的循环副本 21 sort函数V8 引擎 sort 函数只给出了两种排序 InsertionSort 和 QuickSort，数量小于10的数组使用 插入，比10大的数组则使用 快排。 22 navigator 23 jquery绑定方式 click后者覆盖 bind后者覆盖 on(jquery&gt;=1.7) live delegate24 事件流向 冒泡：子节点一层层冒泡到根节点 捕获顺序与冒泡相反 addEventListener最后个参数true代表捕获反之代表冒泡 阻止冒泡不停止父节点捕获25原生操作class123456789101112131415161718192021//判断有无function hasClass(ele, cls) &#123; return ele.className.match(new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\"));&#125;//添加function addClass(ele, cls) &#123; if (!this.hasClass(ele, cls)) ele.className += \" \" + cls;&#125;//删除function removeClass(ele, cls) &#123; if (hasClass(ele, cls)) &#123; let reg = new RegExp(\"(\\\\s|^)\" + cls + \"(\\\\s|$)\"); ele.className = ele.className.replace(reg, \" \"); &#125;&#125;html5中加入classList 一系列操作兼容至IE10 DOM相关dom事件模型DOM之事件模型分脚本模型、内联模型(同类一个，后者覆盖)、动态绑定(同类多个)demo12345678910111213141516171819202122232425262728293031323334353637&lt;body&gt;&lt;!--行内绑定：脚本模型--&gt;&lt;button onclick=\"javascrpt:alert('Hello')\"&gt;Hello1&lt;/button&gt;&lt;!--内联模型--&gt;&lt;button onclick=\"showHello()\"&gt;Hello2&lt;/button&gt;&lt;!--动态绑定--&gt;&lt;button id=\"btn3\"&gt;Hello3&lt;/button&gt;&lt;/body&gt;&lt;script&gt;/*DOM0：同一个元素，同类事件只能添加一个，如果添加多个，* 后面添加的会覆盖之前添加的*/function shoeHello() &#123;alert(\"Hello\");&#125;var btn3 = document.getElementById(\"btn3\");btn3.onclick = function () &#123;alert(\"Hello\");&#125;/*DOM2:可以给同一个元素添加多个同类事件*/btn3.addEventListener(\"click\",function () &#123;alert(\"hello1\");&#125;);btn3.addEventListener(\"click\",function () &#123;alert(\"hello2\");&#125;)if (btn3.attachEvent)&#123;/*IE*/btn3.attachEvent(\"onclick\",function () &#123;alert(\"IE Hello1\");&#125;)&#125;else &#123;/*W3C*/btn3.addEventListener(\"click\",function () &#123;alert(\"W3C Hello\");&#125;)&#125;&lt;/script&gt; 冒泡解释：当点击一个元素触发事件时. 事件会先从元素的最外层父元素一层一层进入到触发的元素, 然后在从触发元素一层一层返回到最外层父元素, 从最外层一层一层进入的阶段叫事件捕获阶段, 从最里层一层一层往外的阶段叫事件冒泡, 移动端触摸事件①touchstart：当手指触碰到屏幕的时候触发②touchmove：当手指在屏幕上滑动的时候触发③touchend：当手指离开屏幕的时候时候触发④touchcancel事件：当系统停止跟踪触摸的时候触发(这个事件很少会用，一般不做深入研究)。 电话接入或者弹出信息等其他事件切入event： touches：表示当前跟踪的触摸操作的touch对象的数组。 targetTouches：特定于事件目标的Touch对象的数组。 changeTouches：表示自上次触摸以来发生了什么改变的Touch对象的数组。 每个touch对象包含的属性 clientX：触摸目标在视口中的x坐标。 clientY：触摸目标在视口中的y坐标。 identifier：标识触摸的唯一ID。 pageX：触摸目标在页面中的x坐标。 pageY：触摸目标在页面中的y坐标。 screenX：触摸目标在屏幕中的x坐标。 screenY：触摸目标在屏幕中的y坐标。 target：触目的DOM节点目标。 事件委托参考定义：事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件好处：给重复的节点添加相同操作，减少dom交互，提高性能实现思路：给父组件添加事件，通过事件冒泡，排查元素是否为指定元素，并进行系列操作 HTTP相关常见状态码2开头 （请求成功）表示成功处理了请求的状态代码。 200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。201 （已创建） 请求成功并且服务器创建了新的资源。202 （已接受） 服务器已接受请求，但尚未处理。203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。204 （无内容） 服务器成功处理了请求，但没有返回任何内容。205 （重置内容） 服务器成功处理了请求，但没有返回任何内容。206 （部分内容） 服务器成功处理了部分 GET 请求。 3开头 （请求被重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。 300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。305 （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。307 （临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 4开头 （请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。 400 （错误请求） 服务器不理解请求的语法。401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。403 （禁止） 服务器拒绝请求。404 （未找到） 服务器找不到请求的网页。405 （方法禁用） 禁用请求中指定的方法。406 （不接受） 无法使用请求的内容特性响应请求的网页。407 （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。408 （请求超时） 服务器等候请求时发生超时。409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。410 （已删除） 如果请求的资源已永久删除，服务器就会返回此响应。411 （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。412 （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。413 （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。414 （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。415 （不支持的媒体类型） 请求的格式不受请求页面的支持。416 （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。417 （未满足期望值） 服务器未满足”期望”请求标头字段的要求。 5开头（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。 500 （服务器内部错误） 服务器遇到错误，无法完成请求。501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。 缓存 Expires在http1.0中使用，与服务器时间有误差，在1.1中由Cache-control替代 cdn Cache-Control 和 Etag 的区别如下图 Cookie sessionStorage localStorage共同点：都是保存在浏览器端，且同源的。区别：cookie数据始终在同源的http请求中携带，即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据不能超过4k(适合保存小数据)。sessionStorage和localStorage容量较大，数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效。localStorage：始终有效，窗口或浏览器关闭也一直保存，需手动清楚；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。作用域不同。sessionStorage不在不同的浏览器窗口中共享；localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。 应用场景：localStorage：常用于长期登录（+判断用户是否已登录），适合长期保存在本地的数据。sessionStorage ：敏感账号一次性登录； cookies与服务器交互。 GET POST区别 请求行，请求头，请求体详解1,2,3请求行，4请求体，5请求体 跨域、JSONP 、CORS、postMessage跨域概念解释：当前发起请求的域与该请求指向的资源所在的域不一样。这里的域指的是这样的一个概念：我们认为若协议 + 域名 + 端口号均相同，那么就是同域。如下表 jsoup实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849原生&lt;script&gt; var script = document.createElement('script'); script.type = 'text/javascript'; // 传参并指定回调执行函数为onBack script.src = 'http://www.domain2.com:8080/login?user=admin&amp;callback=onBack'; document.head.appendChild(script); // 回调执行函数 function onBack(res) &#123; alert(JSON.stringify(res)); &#125; &lt;/script&gt; jquery$.ajax(&#123; url: 'http://www.domain2.com:8080/login', type: 'get', dataType: 'jsonp', // 请求方式为jsonp jsonpCallback: \"onBack\", // 自定义回调函数名 data: &#123;&#125;&#125;);vuethis.$http.jsonp('http://www.domain2.com:8080/login', &#123; params: &#123;&#125;, jsonp: 'onBack'&#125;).then((res) =&gt; &#123; console.log(res); &#125;)配合的后端node实现,其他服务器语言也可以const querystring = require('querystring');const http = require('http');const server = http.createServer();server.on('request', function(req, res) &#123; var params = qs.parse(req.url.split('?')[1]); var fn = params.callback; // jsonp返回设置 res.writeHead(200, &#123; 'Content-Type': 'text/javascript' &#125;); res.write(fn + '(' + JSON.stringify(params) + ')'); res.end();&#125;);server.listen('8080');jsoup缺点只能实现get请求 CORS：跨源资源共享 Cross-Origin Resource Sharing(CORS)，通常服务器设置，若带cookie请求，则前后端都需要设置后端常见设置response.setHeader(“Access-Control-Allow-Origin”, “http://www.domain1.com&quot;); // 若有端口需写全（协议+域名+端口），允许那些外源请求response.setHeader(“Access-Control-Allow-Credentials”, “true”); //是否需要验证 前端示例 1234567891011121314151617181920212223原生var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容// 前端设置是否带cookiexhr.withCredentials = true;xhr.open('post', 'http://www.domain2.com:8080/login', true);xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');xhr.send('user=admin'); xhr.onreadystatechange = function() &#123; if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; alert(xhr.responseText); &#125;jquery$.ajax(&#123; ... xhrFields: &#123; withCredentials: true // 前端设置是否带cookie &#125;, crossDomain: true, // 会让请求头中包含跨域的额外信息，但不会含cookie ...&#125;); 12345678910111213141516171819202122232425262728293031323334353637postMessage(data,origin)方法接受两个参数demoa.html&lt;iframe id=\"iframe\" src=\"http://www.domain2.com/b.html\" style=\"display:none;\"&gt;&lt;/iframe&gt;&lt;script&gt; var iframe = document.getElementById('iframe'); iframe.onload = function() &#123; var data = &#123; name: 'aym' &#125;; // 向domain2传送跨域数据 iframe.contentWindow.postMessage(JSON.stringify(data), 'http://www.domain2.com'); &#125;; // 接受domain2返回数据 window.addEventListener('message', function(e) &#123; alert('data from domain2 ---&gt; ' + e.data); &#125;, false);&lt;/script&gt;b.html 与a.html不同源&lt;script&gt; // 接收domain1的数据 window.addEventListener('message', function(e) &#123; alert('data from domain1 ---&gt; ' + e.data); var data = JSON.parse(e.data); if (data) &#123; data.number = 16; // 处理后再发回domain1 window.parent.postMessage(JSON.stringify(data), 'http://www.domain1.com'); &#125; &#125;, false);&lt;/script&gt; osi模型七层结构：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层tcp ucp属于传输层；http属于应用层 http2.0 http1 HTTP2.0的基本单位为二进制帧 HTTP2.0中帧具有优先级 HTTP2.0的多路复用（ 1次连接） HTTP2.0压缩消息头 HTTP2.0服务端推送 HTTP2.0只适用于HTTPS的场景Vue相关 生命周期顺序 组件通信1.父传子用props,父用子用ref 子调父用$emit,无关系用Bus Vuex组件通信库，可以避免子组件无法改变props的弊端等mutations 同步操作， 用于改变状态 官方不推荐异步action 执行多个mutaions，官方推荐异步操作mapState、mapGetters、mapActions使用示例 123456789101112131415161718&lt;template&gt; &lt;el-dialog :visible.sync=\"show\"&gt;&lt;/el-dialog&gt;&lt;/template&gt;&lt;script&gt;import &#123;mapState&#125; from 'vuex';export default &#123; computed:&#123; //这里的三点叫做 : 扩展运算符 ...mapState(&#123; show:state=&gt;state.dialog.show &#125;), &#125;&#125;&lt;/script&gt;后两者类似 VueRouter123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185定义var routes = [ &#123; path:\"/one\", component:导入的组件1 &#125;, &#123; path:\"/two\", component:导入的组件2 &#125;,];// 定义路由组件var router = new VueRouter(&#123; routes&#125;);// 定义路由new Vue(&#123; el:\"#box\", router&#125;); 访问设定的路由后 会将&lt;router-view&gt;&lt;/router-view&gt;替换成相应的模版 html访问方式 &lt;router-link to=\"/one\"&gt;One&lt;/router-link&gt;(类似a标签) js访问方式 this.$router.push('/one'); replace方式 替换当前页面 携带的参数 可以通过this.$route.query.xxxx来获取``` ##### Vue双向绑定原理：利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。缺点：双向数据流是自动管理状态的, 但是在实际应用中会有很多不得不手动处理状态变化的逻辑, 使得程序复杂度上升, 难以调试。##### computed watch methods用法：区别：1. 前两者自动追踪数据，执行相关函数，最后一个手动调用；2. computed是计算属性，用法与data一致3. watch像事件监听，对象发生变化时，执行相关操作4. methods与js中执行方法类似5. computed通常只有get属性6. 数据变化的同时进行异步操作或者是比较大的开销，那么watch为最佳选择7. watch的对象必须事先声明#### &lt;div id=\"sort\"&gt;算法相关&lt;/div&gt;##### 各种排序实现相关数据![表格](http://pd4ar0u4q.bkt.clouddn.com/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%AD%89%E7%AD%89.png)```javascript// 冒泡排序: 比较两个相邻的项，如果第一个大于第二个则交换他们的位置,元素项向上移动至正确的顺序，就好像气泡往上冒一样冒泡demo:function bubbleSort(arr) &#123; let len = arr.length; for (let i = 0; i &lt; len; i++) &#123; for (let j = 0; j &lt; len - 1 - i; j++) &#123; if (arr[j] &gt; arr[j+1]) &#123; //相邻元素两两对比 [arr[j + 1], arr[j]] = [arr[j], arr[j + 1]]; &#125; &#125; &#125; return arr;&#125;// 1) 首先，在数组中选择一个中间项作为主元// 2) 创建两个指针，左边的指向数组第一个项，右边的指向最后一个项，移动左指针，直到找到一个比主元大的项，接着，移动右边的指针，直到找到一个比主元小的项，然后交换它们。重复这个过程，直到// 左侧的指针超过了右侧的指针。这个使比主元小的都在左侧，比主元大的都在右侧。这一步叫划分操作// 3) 接着，算法对划分后的小数组（较主元小的值组成的的小数组， 以及较主元大的值组成的小数组）重复之前的两个步骤，直到排序完成快排demo:function quickSort(arr, left, right) &#123; let len = arr.length; let partitionIndex; left = typeof left !== 'number' ? 0 : left; right = typeof right !== 'number' ? len - 1 : right; if (left &lt; right) &#123; partitionIndex = partition(arr, left, right); quickSort(arr, left, partitionIndex - 1); quickSort(arr, partitionIndex + 1, right); &#125; return arr;&#125;function partition(arr, left, right) &#123; //分区操作 let pivot = left; //设定基准值（pivot） let index = pivot + 1; for (let i = index; i &lt;= right; i++) &#123; if (arr[i] &lt; arr[pivot]) &#123; [arr[i], arr[index]] = [arr[index], arr[i]]; index++; &#125; &#125; [arr[pivot], arr[index - 1]] = [arr[index - 1], arr[pivot]]; return index - 1;&#125;// 选择排序：大概思路是找到最小的放在第一位，找到第二小的放在第二位，以此类推 算法复杂度O(n^2)选择demo:function selectionSort(arr) &#123; let len = arr.length; let minIndex; for (let i = 0; i &lt; len - 1; i++) &#123; minIndex = i; for (let j = i + 1; j &lt; len; j++) &#123; if (arr[j] &lt; arr[minIndex]) &#123; //寻找最小的数 minIndex = j; //将最小数的索引保存 &#125; &#125; [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]]; &#125;return arr;&#125;// 插入排序：每次排一个数组项，假设数组的第一项已经排序，接着，把第二项与第一项进行对比，第二项是该插入到第一项之前还是之后，第三项是该插入到第一项之前还是第一项之后还是第三项插入demo:function insertionSort(arr) &#123; let len = arr.length; let preIndex, current; for (let i = 1; i &lt; len; i++) &#123; preIndex = i - 1; current = arr[i]; while (preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123; arr[preIndex + 1] = arr[preIndex]; preIndex--; &#125; arr[preIndex + 1] = current; &#125; return arr;&#125;// 归并排序：Mozilla Firefox 使用归并排序作为Array.prototype.sort的实现，而chrome使用快速排序的一个变体实现的,前面三种算法性能不好，但归并排序性能不错 算法复杂度O(nlog^n)// 归并排序是一种分治算法。本质上就是把一个原始数组切分成较小的数组，直到每个小数组只有一个位置，接着把小数组归并成较大的数组，在归并过程中也会完成排序，直到最后只有一个排序完毕的大数组归并demo:function mergeSort(arr) &#123; //采用自上而下的递归方法 let len = arr.length; if(len &lt; 2) &#123; return arr; &#125; let middle = Math.floor(len / 2), left = arr.slice(0, middle), right = arr.slice(middle); return merge(mergeSort(left), mergeSort(right));&#125;function merge(left, right)&#123; let result = []; while (left.length &amp;&amp; right.length) &#123; if (left[0] &lt;= right[0]) &#123; result.push(left.shift()); &#125; else &#123; result.push(right.shift()); &#125; &#125; result.push(...left); result.push(...right); return result;&#125;//堆排序：堆排序把数组当中二叉树来排序而得名。// 1）索引0是树的根节点；2）除根节点为，任意节点N的父节点是N/2；3）节点L的左子节点是2*L；4）节点R的右子节点为2*R + 1// 本质上就是先构建二叉树，然后把根节点与最后一个进行交换，然后对剩下对元素进行二叉树构建，进行交换，直到剩下最后一个堆demo:var len; //因为声明的多个函数都需要数据长度，所以把len设置成为全局变量function buildMaxHeap(arr) &#123; //建立大顶堆 len = arr.length; for (let i = Math.floor(len / 2); i &gt;= 0; i--) &#123; heapify(arr, i); &#125;&#125;function heapify(arr, i) &#123; //堆调整 let left = 2 * i + 1; let right = 2 * i + 2; let largest = i; if (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123; largest = left; &#125; if (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123; largest = right; &#125; if (largest !== i) &#123; [arr[i], arr[largest]] = [arr[largest], arr[i]]; heapify(arr, largest); &#125;&#125;function heapSort(arr) &#123; buildMaxHeap(arr); for (let i = arr.length - 1; i &gt; 0; i--) &#123; [arr[0],arr[i]]=[arr[i],arr[0]]; len--; heapify(arr, 0); &#125; return arr;&#125; 二分查找思路（1）首先，从有序数组的中间的元素开始搜索，如果该元素正好是目标元素（即要查找的元素），则搜索过程结束，否则进行下一步。（2）如果目标元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半区域查找，然后重复第一步的操作。（3）如果某一步数组为空，则表示找不到目标元素。 1234567891011121314151617181920212223242526272829303132333435// 非递归算法function binary_search(arr, key) &#123; let low = 0; let high = arr.length - 1; while(low &lt;= high)&#123; let mid = parseInt((high + low) / 2); if(key === arr[mid])&#123; return mid; &#125;else if(key &gt; arr[mid])&#123; low = mid + 1; &#125;else if(key &lt; arr[mid])&#123; high = mid -1; &#125;else&#123; return -1; &#125; &#125;&#125; // 递归算法function binary_search(arr,low, high, key) &#123; if (low &gt; high)&#123; return -1; &#125; let mid = parseInt((high + low) / 2); if(arr[mid] === key)&#123; return mid; &#125;else if (arr[mid] &gt; key)&#123; high = mid - 1; return binary_search(arr, low, high, key); &#125;else if (arr[mid] &lt; key)&#123; low = mid + 1; return binary_search(arr, low, high, key); &#125;&#125;; 二叉树相关12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849创建function Node(data,left,right)&#123; this.data = data;//数值 this.left = left;//左节点 this.right = right;//右节点&#125;;插入二叉树function insert(node,data)&#123; //创建一个新的节点 let newNode = new Node(data,null,null); //判断是否存在根节点，没有将新节点存入 if(node == null)&#123; node = newNode; &#125;else&#123; //获取根节点 let current = node; let parent; while(true)&#123; //将当前节点保存为父节点 parent = current; //将小的数据放在左节点 if(data &lt; current.data)&#123; //获取当前节点的左节点 //判断当前节点下的左节点是否有数据 current = current.left; if(current == null)&#123; //如果没有数据将新节点存入当前节点下的左节点 parent.left = newNode; break; &#125; &#125;else&#123; current = current.right; if(current == null)&#123; parent.right = newNode; break; &#125; &#125; &#125; &#125;&#125;翻转二叉树function invertTree(node) &#123; if (node !== null) &#123; node.left, node.right = node.left, node.right; invertTree(node.left); invertTree(node.right); &#125; return node;&#125; 1234查找链表中倒数第k个结点2个思路1：先遍历出长度，然后查找长度-k+1的值2：2个指针，一个指针先走k-1，然后两个一起走到底部，后者就是结果 网络安全相关XSS CSRFXSS(跨站脚本攻击)，恶意的注入html代码，其他用户访问时，会被执行特点：能注入恶意的HTML/JavaScript代码到用户浏览的网页上，从而达到Cookie资料窃取、会话劫持、钓鱼欺骗等攻击防御手段： 浏览器禁止页面的JS访问带有HttpOnly属性的Cookie 两端进行输入格式检查 通过编码转义的方式进行输出检查CSRF(攻击跨站请求伪造)特点：重要操作的所有参数都是可以被攻击者猜测到的。攻击者预测出URL的所有参数与参数值，才能成功地构造一个伪造的请求。防御手段： token验证机制，比如请求数据字段中添加一个token，响应请求时校验其有效性 用户操作限制，比如验证码（繁琐，用户体验差） 请求来源限制，比如限制HTTP Referer才能完成操作（防御效果相比较差）实践中常用第一种 webpack相关#####打包体积优化思路 提取第三方库或通过引用外部文件的方式引入第三方库 代码压缩插件UglifyJsPlugin 服务器启用gzip压缩 按需加载资源文件 require.ensure 优化devtool中的source-map 剥离css文件，单独打包 去除不必要插件，通常就是开发环境与生产环境用同一套配置文件导致#####打包效率 开发环境采用增量构建，启用热更新 开发环境不做无意义的工作如提取css计算文件hash等 配置devtool 选择合适的loader 个别loader开启cache 如babel-loader 第三方库采用引入方式 提取公共代码 优化构建时的搜索路径 指明需要构建目录及不需要构建目录 模块化引入需要的部分Loader编写一个loader123456789101112131415161718loader就是一个node模块，它输出了一个函数。当某种资源需要用这个loader转换时，这个函数会被调用。并且，这个函数可以通过提供给它的this上下文访问Loader API。reverse-txt-loader定义module.exports = function(src) &#123; //src是原文件内容（abcde），下面对内容进行处理，这里是反转 var result = src.split('').reverse().join(''); //返回JavaScript源码，必须是String或者Buffer return `module.exports = '$&#123;result&#125;'`;&#125;使用&#123; test: /\\.txt$/, use: [ &#123; './path/reverse-txt-loader' &#125; ]&#125;, plugins使用范围更广，通常只需要require()然后添加到plugins数组中，且需要new一个其他URL到界面显示发生了什么 DNS解析先本地缓存找，在一层层找将常见的地址解析成唯一对应的ip地址基本顺序为：本地域名服务器-&gt;根域名服务器-&gt;com顶级域名服务器依次类推下去,找到后记录并缓存下来如www.google.com为. -&gt; .com -&gt; google.com. -&gt; www.google.com. TCP连接三次握手，只要没收到确认消息就要重新发 主机向服务器发送一个建立连接的请求（您好，我想认识您）； 服务器接到请求后发送同意连接的信号（好的，很高兴认识您）； 主机接到同意连接的信号后，再次向服务器发送了确认信号（我也很高兴认识您），自此，主机与服务器两者建立了连接。 发送HTTP请求浏览器会分析这个url，并设置好请求报文发出。请求报文中包括请求行、请求头、空行、请求主体。https默认请求端口443， http默认80。常见的http请求如下1234567891011121314POST / HTTP1.1Host:www.wrox.comUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)Content-Type:application/x-www-form-urlencodedContent-Length:40Connection: Keep-Alivename=Professional%20Ajax&amp;publisher=Wiley第一部分：请求行，第一行说明是post请求，以及http1.1版本。第二部分：请求头部，第二行至第六行。第三部分：空行，第七行的空行。第四部分：请求数据，第八行。4. 服务器处理请求并返回HTTP报文后端处理返回http报文如下 12345678910111213141516HTTP/1.1 200 OKDate: Fri, 22 May 2009 06:07:21 GMTContent-Type: text/html; charset=UTF-8&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;!--body goes here--&gt; &lt;/body&gt;&lt;/html&gt;第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8第三部分：空行，消息报头后面的空行是必须的第四部分：响应正文，服务器返回给客户端的文本信息。空行后面的html部分为响应正文。 浏览器解析渲染页面 通过HTML解析器解析HTML文档，构建一个DOM Tree，同时通过CSS解析器解析HTML中存在的CSS，构建Style Rules，两者结合形成一个Attachment。 通过Attachment构造出一个呈现树（Render Tree） Render Tree构建完毕，进入到布局阶段（layout/reflow），将会为每个阶段分配一个应出现在屏幕上的确切坐标。 最后将全部的节点遍历绘制出来后，一个页面就展现出来了。遇到script会停下来执行，所以通常把script放在底部 连接结束 组件封装目的：为了重用，提高开发效率和代码质量注意：低耦合，单一职责，可复用性，可维护性常用操作： 分析布局 初步开发 化繁为简 组件抽象 JS异步加载 动态生成script标签 添加h5的async defer属性，前者乱序不适合依赖性加载 async 是“下载完就执行”， defer 是“渲染完再执行” css与js动画差异 css性能好 css代码逻辑相对简单 js动画控制好 js兼容性好 js可实现的动画多 js可以添加事件 负载均衡多台服务器共同协作，不让其中某一台或几台超额工作，发挥服务器的最大作用 http重定向负载均衡：调度者根据策略选择服务器以302响应请求，缺点只有第一次有效果，后续操作维持在该服务器 dns负载均衡：解析域名时，访问多个ip服务器中的一个（可监控性较弱） 反向代理负载均衡：访问统一的服务器，由服务器进行调度访问实际的某个服务器，对统一的服务器要求大，性能受到 服务器群的数量 CDN内容分发网络，基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。 内存泄漏定义：程序中己动态分配的堆内存由于某种原因程序未释放或无法释放引发的各种问题js中可能出现的内存泄漏情况结果：变慢，崩溃，延迟大等原因： 全局变量 dom清空时，还存在引用 ie中使用闭包 定时器未清理 子元素存在引起的内存泄露 避免策略： 减少不必要的全局变量，或者生命周期较长的对象，及时对无用的数据进行垃圾回收； 注意程序逻辑，避免“死循环”之类的 ； 避免创建过多的对象 原则：不用了的东西要及时归还。 减少层级过多的引用babel原理ES6、7代码输入 -&gt; babylon进行解析 -&gt; 得到AST（抽象语法树）-&gt; plugin用babel-traverse对AST树进行遍历转译 -&gt;得到新的AST树-&gt;用babel-generator通过AST树生成ES5代码、 promise特性：Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止，也即是说，错误总会被下一个catch语句捕获 js自定义事件三要素：document.createEvent()event.initEvent()element.dispatchEvent() 1234567891011121314151617181920212223242526272829demo:(en:自定义事件名称，fn:事件处理函数，addEvent:为DOM元素添加自定义事件，triggerEvent:触发自定义事件)window.onload = function()&#123; var demo = document.getElementById(\"demo\"); demo.addEvent(\"test\",function()&#123;console.log(\"handler1\")&#125;); demo.addEvent(\"test\",function()&#123;console.log(\"handler2\")&#125;); demo.onclick = function()&#123; this.triggerEvent(\"test\"); &#125;&#125;Element.prototype.addEvent = function(en,fn)&#123; this.pools = this.pools || &#123;&#125;; if(en in this.pools)&#123; this.pools[en].push(fn); &#125;else&#123; this.pools[en] = []; this.pools[en].push(fn); &#125;&#125;Element.prototype.triggerEvent = function(en)&#123; if(en in this.pools)&#123; var fns = this.pools[en]; for(var i=0,il=fns.length;i&lt;il;i++)&#123; fns[i](); &#125; &#125;else&#123; return; &#125;&#125; es6模块 commonjs amd cmd CommonJS 的规范中，每个 JavaScript 文件就是一个独立的模块上下文（module context），在这个上下文中默认创建的属性都是私有的。也就是说，在一个文件定义的变量（还包括函数和类），都是私有的，对其他文件是不可见的。 CommonJS是同步加载模块,在浏览器中会出现堵塞情况，所以不适用 AMD 异步，需要定义回调define方式 es6 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量 es6还可以导出类、方法，自动适用严格模式 前后端路由差别1.后端每次路由请求都是重新访问服务器2.前端路由实际上只是JS根据URL来操作DOM元素，根据每个页面需要的去服务端请求数据，返回数据后和模板进行组合。","categories":[{"name":"前端周刊","slug":"前端周刊","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%91%A8%E5%88%8A/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"前端周刊-2018年09月第3周","slug":"前端周刊-2018年09月第3周","date":"2018-09-21T08:24:00.000Z","updated":"2019-11-07T14:30:57.247Z","comments":true,"path":"2018/09/21/前端周刊-2018年09月第3周/","link":"","permalink":"http://yoursite.com/2018/09/21/%E5%89%8D%E7%AB%AF%E5%91%A8%E5%88%8A-2018%E5%B9%B409%E6%9C%88%E7%AC%AC3%E5%91%A8/","excerpt":"","text":"编写「可读」代码的实践链接:http://taobaofed.org/blog/2017/01/05/writing-readable-code/ 摘要伟大的文学作品都是建立在废纸堆上的，不断删改作品的过程有助于写作者培养良好的「语感」。当然，代码毕竟不是艺术品，程序员没有精力也不一定有必要像作家一样反复打磨自己的代码/作品。但是，如果我们能够在编写代码时稍稍多考虑一下实现的合理性，或者在添加新功能的时候稍稍回顾一下之前的实现，我们就能够培养出一些「代码语感」。这种「代码语感」会非常有助于我们写出高质量的可读的代码。 React + Redux 组件化方案链接:http://imweb.io/topic/57c531bc6227a4f55a8872c2 摘要组件化方案:理想中的组件化，第一步应该就是组件的标签化， 例如有一个 Header 组件，无需关注组件内部的实现，我们只需要使用一个 标签就能调用它，通过设置属性的方式，来控制它的显示的内容，和对应的事件。借助 jsx 语法，React 已经实现上述想法。但是由于 React 的数据流向是单向的， 子组件的数据和方法只能由父级组件赋予，一旦组件嵌套层次变深，传递数据将会变得非常复杂。redux 框架解决了这个问题，简单来说，它将 react 由父级传递数据，变为了由一个统一的数据源 store 单向地向各个组件传递数据。所有数据都存放在 store 中，组件内部不维护任何数据。 store 提供了 dispatch 方法来触发改变 store 中数据。 dispatch 传入的值被称作 action。 dispatch(action) 之后，会进入到 store 中称为 reducer 的处理函数，这些 reducer 会依据不同的 action 的类型，进行不同的处理，reducer 返回的值就会作为 store 中新的数据，一个 reducer 对应的是 store 中一个数据字段，每多一个reducer， store 中就多一个数据字段。数据发生改变后， store 就会通知对应的组件重新渲染。 通过 redux 框架提供的 connect 高阶函数， 直接从 store 选取需要的数据和申明需要使用的方法传入组件中，这些申明的方法是组件事件具体的逻辑的实现，例如发送请求，上报逻辑等等，所以通常调用 dispatch(action) 的逻辑也会包含在里面。 ANT DESIGN PRO-开箱即用的中台前端/设计解决方案链接:https://github.com/ant-design/ant-design-pro?utm_source=gold_browser_extension 摘要💎 优雅美观：基于 Ant Design 体系精心设计；📐 常见设计模式：提炼自中后台应用的典型页面和场景；🚀 最新技术栈：使用 React/dva/antd 等前端前沿技术开发；📱 响应式：针对不同屏幕大小设计；🎨 主题：可配置的主题满足多样化的品牌诉求；🌐 国际化：内建业界通用的国际化方案；⚙️ 最佳实践：良好的工程实践助您持续产出高质量代码；🔢 Mock 数据：实用的本地数据调试方案；✅ UI 测试：自动化测试保障前端产品质量； 实现一个完美符合Promise/A+规范的Promise链接:https://github.com/forthealllight/blog/issues/4 摘要Promise允许我们通过链式调用的方式来解决“回调地狱”的问题，特别是在异步过程中，通过Promise可以保证代码的整洁性和可读性。本文主要解读Promise/A+规范，并在此规范的基础上，自己实现一个Promise. Vue知识点整理链接https://segmentfault.com/a/1190000016344599 对于MVVM的理解？ Model代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑。View 代表UI 组件，它负责将数据模型转化成UI 展现出来。ViewModel 监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View。在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上。ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。 Vue的生命周期（8个阶段：创建前/后, 载入前/后,更新前/后,销毁前/销毁后) Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。beforeCreate（创建前） 在数据观测和初始化事件还未开始created（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来beforeMount（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。mounted（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。beforeUpdate（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。updated（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。beforeDestroy（销毁前） 在实例销毁之前调用。实例仍然完全可用。destroyed（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。 Vue实现数据双向绑定的原理：Object.defineProperty（） Vue组件间的参数传递 1.父组件与子组件传值父组件传给子组件：子组件通过props方法接受数据;子组件传给父组件：$emit方法传递参数2.非父子组件间的数据传递，兄弟组件传值eventBus，就是创建一个事件中心，相当于中转站，可以用它来传递事件和接收事件。项目比较小时，用这个比较合适 vue路由的钩子函数 首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。 beforeEach主要有3个参数to，from，next： to：route即将进入的目标路由对象， from：route当前导航正要离开的路由 next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转。 vuex是什么？怎么使用？哪种功能场景使用它只用来读取的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。在main.js引入store，注入。新建了一个目录store，….. export 。场景有：单页应用中，组件之间的状态、音乐播放、登录状态、加入购物车","categories":[{"name":"前端周刊","slug":"前端周刊","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%91%A8%E5%88%8A/"}],"tags":[{"name":"分享","slug":"分享","permalink":"http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"}]},{"title":"前端开发规范-used by frank","slug":"前端开发规范-used-by-frank","date":"2018-09-21T08:20:34.000Z","updated":"2019-11-07T14:36:15.454Z","comments":true,"path":"2018/09/21/前端开发规范-used-by-frank/","link":"","permalink":"http://yoursite.com/2018/09/21/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83-used-by-frank/","excerpt":"","text":"js方法注释规范规范的注释很重要代码是写给人看的，顺便给机器运行，多谢注释可以增加代码的可读性 123456789101112131415161718/** ************** * @func 教师端请假功能 ; * @param &#123;String&#125; token 教师端头部的token; * @param &#123;string&#125; a - 参数a; * @param &#123;number&#125; b=1 - 参数b默认值为1; * @param &#123;string&#125; c=1 - 参数c有两种支持的取值&lt;/br&gt;1—表示x&lt;/br&gt;2—表示xx; * @param &#123;object&#125; d - 参数d为一个对象; * @param &#123;string&#125; d.e - 参数d的e属性; * @param &#123;string&#125; d.f - 参数d的f属性; * @param &#123;object[]&#125; g - 参数g为一个对象数组; * @param &#123;string&#125; g.h - 参数g数组中一项的h属性; * @param &#123;string&#125; g.i - 参数g数组中一项的i属性; * @param &#123;string&#125; [j] - 参数j是一个可选参数; * @description 2018年4月19日被frank开发于dev_sprint65分支， * XX年XX月被XX在xx分支修改（原因或者修改的功能）; ****************/ 变量命名规范1.标准变量命名使用驼峰式命名 eg. let thisIsMyName;2.常量全部大写，并使用下划线连接 eg. const MAX_COUNT = 10; 项目规范变量声明尽量提在函数首部，用一个var声明，不允许出现连着的两个var声明(也包括let，const) 1234567891011function doSomethingWithItems(items) &#123; // use one var var value = 10, result = value + 10, i, len; for (i = 0, len = items.length; i &lt; len; i++) &#123; result += 10; &#125;&#125; undefind使用规范（永远不要直接使用undefined进行变量判断，使用typeof和字符串’undefined’对变量进行判断。） 123456789// not goodif (person === undefined) &#123; ...&#125;// goodif (typeof person === 'undefined') &#123; ...&#125; 用’===’和’!==’代替’==’, ‘!=’使用对象的属性简写 123456789const job = 'FrontEnd'// badconst item = &#123; job: job&#125;// goodconst item = &#123; job&#125; 使用拓展运算符 … 复制数组 1234567891011// badconst items = []const itemsCopy = []const len = items.lengthlet i// badfor (i = 0; i &lt; len; i++) &#123; itemsCopy[i] = items[i]&#125;// gooditemsCopy = [...items] render使用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051render: (h, params) =&gt; &#123; return h('div', [ h('span', &#123; attrs: &#123; class: \"table_details\" &#125;, on: &#123; click: () =&gt; &#123; this.edit(params.index) &#125; &#125; &#125;,), h('span', &#123; attrs: &#123; class: \"table_continue\" &#125;, on: &#123; click: () =&gt; &#123; this.show(params.index) &#125; &#125; &#125;,), h('span', &#123; attrs: &#123; class: \"table_more no_border_right\" &#125;, on: &#123; click: () =&gt; &#123; this.remove(params.row.id) &#125; &#125; &#125;,), h('Poptip', &#123; props: &#123; title:\"项目变更\", content:\"项目迁出\", placement:\"bottom-end\" &#125;, on: &#123; 'on-ok': () =&gt; &#123; &#125; &#125; &#125;, [ h('span', &#123; attrs: &#123; class: \"table_more no_border_right\" &#125; &#125;) ]) ])&#125; 文档：有时间整理一下http://taobaofed.org/blog/2017/01/05/writing-readable-code/","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端自动化","slug":"前端自动化","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"}]},{"title":"使用hexo搭建github.io博客","slug":"使用hexo搭建github-io博客","date":"2018-09-07T02:57:11.000Z","updated":"2019-11-07T14:30:57.815Z","comments":true,"path":"2018/09/07/使用hexo搭建github-io博客/","link":"","permalink":"http://yoursite.com/2018/09/07/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub-io%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"Introduction 回顾一下我三年搭建博客的历程，最初是选择wordpress，Wordpress全部由php编写，数组库采用MySQL。优点：用户只需要将Wordpress的源代码复制到网站根目录下，然后访问网站，之后的安装操作全部在浏览器上完成。即使不是软件行业的人，也可以在几分钟之内完成安装工作。甚至很多虚拟主机供应商都提供了Wordpress的一键式安装工具。用户连上传文件的步骤都省了。缺点：项目太臃肿了，Wordpress耗损CPU严重，不容易操作，运行稍慢。尤其是后期文章数目较多的时候，想要登陆下网站的管理后台，心态简直是抓狂的。loading了好久，有时候还会失败，发一篇文章也很费劲，索性就不维护了。后来在github网站上找到一个vue模板：github地址和demo预览二次开发了一下，的确是实现了很多功能，也挺轻便的，样式也可以自定义，博客可以直接写在github的issue，很方便，用了三个月后才发现百度的搜索引擎居然只收录了首页，搜索引擎的基础爬虫的原理就是抓取你的url，然后获取你的html源代码并解析。 而你的页面通常用了vue等js的数据绑定机制来展示页面数据，爬虫获取到的html是你的模型页面而不是最终数据的渲染页面，所以说用js来渲染数据对seo并不友好。而且github api在国内访问速度也没有想象中那么快，可能是github的CDN被墙屏了。 使用github.io可以搭建一个自己的博客,把静态文件项目托管到github上,可以写博客,可以使用markdown语法,也可以展示作品.灵活性高.但是有较大的难度,但是这对于一个熟悉git操作的前端开发工程师来说，都不算什么的。重点是hexo和github.io的域名和服务器都是免费的。当然也可以选择用自己的服务器和域名。 Quick Start安装 node,git，注册好github账号 (网站有很多教程，安装方法这里就不详细展开了，注意:github账号用户名一定不能有大写.) 安装hexo: 1npm install -g hexo 创建hexo文件夹:cmd窗口切换到对应的目录下,然后执行: hexo init也可以在 E:\\hexo 下右键,选择git bash,在窗口中执行hexo init自动安装了需要的文件. 安装依赖:继续执行: npm install 完成本地安装:继续在 E:\\hexo 下执行: hexo generate 继续执行: hexo server 然后在打开浏览器 localhost:4000 ,就可以看到,本地已经安装好了. 在github上创建博客仓库: 跳转的后如下填写:(其中Repository name的格式是 ‘用户名’.github.io ),然后点创建仓库，Repository name必须和用户名（Owner）一致，不能有大写字母 创建SSH keys监测是否有已经存在的SSH keys:打开 git bash 终端(可以在 E:\\hexo 下右键打开,也可以直接在开始菜单里打开) 执行: $ ls -al ~/.ssh 如果没有的话,就生成一个SSH keys: 写自己的邮箱$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 然后会出现: 12Generating public/private rsa key pair.Enter file in which to save the key (/Users/you/.ssh/id_rsa): 就是让你输入SSH keys要保存在哪里,一般不用改,就直接回车就好了.输入一个密码,这个密码后面会用到,所以要记住咯 保存SSH keys:创建成功后,他会提示你SSH keys保存在哪里: 1234567Your identification has been saved in /Users/you/.ssh/id_rsa.# Your public key has been saved in /Users/you/.ssh/id_rsa.pub.# The key fingerprint is:# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 找到SSH keys:根据上一步里告诉你的路径,找到保存SSH keys的地方,我的是在 C:\\Users\\2000104591.ssh 其中 id_rsa.pub 就是SSH keys 如果为了防止以后找不到,可以把他们自己另存到其它地方 为github仓库添加SSH keys然后把创建的id_rsa.pub里的内容复制到Key里去,Title部分随便填. 点击’Add key’ 添加的过程中,还要再输入一次github的密码 配置_config.yml文件并发布:在 E:\\hexo(文件根目录下) 下,有一个文件叫 _config.yml ,打开它,拉到最底下,做如下修改: 然后再执行: hexo generate hexo deploy 然后访问: https://ye63.github.io/ (用户名改成自己的),就可以看到了. 快捷命令hexo 新建一篇文章给它添加分类和标签:1hexo new &quot;移动端限制input框只能输入数字&quot; 通过mou编辑器打开：添加tags和categories123456789---title: title #文章標題date: 2016-06-01 23:47:44 #文章生成時間categories: &quot;Hexo教程&quot; #文章分類目錄 可以省略tags: #文章标签 可以省略 - 标签1 - 标签2description: #你對本頁的描述 可以省略--- 发布1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 创建新页面1hexo new page &quot;about&quot;","categories":[{"name":"Hexo教程","slug":"Hexo教程","permalink":"http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"}],"tags":[]},{"title":"git总结","slug":"git 自己的总结","date":"2018-08-28T13:01:40.000Z","updated":"2019-11-15T12:40:33.808Z","comments":true,"path":"2018/08/28/git 自己的总结/","link":"","permalink":"http://yoursite.com/2018/08/28/git%20%E8%87%AA%E5%B7%B1%E7%9A%84%E6%80%BB%E7%BB%93/","excerpt":"","text":"1先在码云官网创建自己的项目略 2在桌面 拉去远端码云项目到本地:1git clone https://gitee.com/edward_h/OnlineEducation.git 3新建分支,并关联远程分支方便以后上传项目文件,注意 有些个性化配置需要上传,比如vue项目的 node_modules1git checkout -b dev # 创建分支并切换到该分支 切换分支 （dev是分支名)1git checkout dev # 切换分支 （dev是分支名) #这步不用建立分支了 查看分支1git branch 4.创建远程分支连接(此处为master分支)1git branch --set-upstream-to=origin/master 如果提示错误,则说明远程没有该分支,则需要创建该远程分支 创建完毕后,再执行4操作,关联远程分支 5.执行添加项目操作,这两步操作必须同时存在123git add -A 文件名 :添加修改文件 git commit -m \"提交的信息\" 将文件存进暂存区 6.此处拉下文件如果提示冲突,则解决完冲突,再次执行第五步操作,因为修改了冲突的代码,所以重新将代码添加到暂存区1git pull # 下拉最新文件 1234git add 文件名 git add -A 提交所有修改git commit -m \"提交的信息\" 7.直到不显示冲突则说明解决完冲突了,再提交1git push # 上传文件 不提示错误,则上传完毕 8.可以查看上一次的修改操作是什么1git status 备用知识点 建项目着 如果想让其他人通过输入账号密码才能上传文件 则输入如下命令 (这些命令用不到)插入如下代码使项目中的组员每次修改数据都要输入账号和密码： git config –global user.name [username] git config –global user.password [userpassword] PS：想要保存密码，则需要插入如下代码： git config –global credential.helper store。 ###gitee推送到远程仓库时提示错误 remote: Incorrect username or password ( access token ) fatal: Authentication failed for ‘https://gitee.com/***/***.git/&#39; 解决办法：清除本地的gitee用户名和密码 git config –system –unset credential.helper 再执行推送，重新输入用户名和密码。","categories":[],"tags":[]},{"title":"练习用原生JavaScript编写与JavaScript数组方法slice功能一样的函数","slug":"celery","date":"2017-06-28T13:01:40.000Z","updated":"2019-11-07T14:50:54.194Z","comments":true,"path":"2017/06/28/celery/","link":"","permalink":"http://yoursite.com/2017/06/28/celery/","excerpt":"","text":"鉴于公司项目及业务发展，技术人员从几人到如今几十人，后端团队技术人员日益剧增，可是随着项目人员的增长，大多研发人员及相关人员经常需要到测试环境使用 MySQL 数据库，比如移动端、测试、产品，然而他们需要普及 MySQL 知识点及性能优化的知识，其实性能优化的目标是针对后端研发人员及一些资深的前端人员，可能会从如下大的知识点讲解。 一、安装说明 首先学习数据库，当然是安装软件。千里之行，始于足下，如果连安装都不会，如何进行后续的入门学习。可是对于安装也有不同方式，比如 RPM 和源码编译安装呢。 1.1 RPM 安装包和 Tar 安装包的区别？ RPM 直接安装，Tar 属于源码安装，可以设置更多的参数，可以和系统进行更紧密的优化。举个例子，RPM 是 180/96、185/100 之类的标准版型，Tar 源码安装类似于私人定制，量体裁衣的。其实个人觉得 RPM 安装适合小白入门，简单了解下 MySQL，不用做过多安装上的了解，然而源码编译安装适合比如经常跟 MySQL 打交道的工程师，比如 web 研发人员、c++ 工程师等，总不能只是知道如何简单的使用和 curd，其实对于技术人员的纵向知识体系打造是不好的，其实源码编译安装，还可能自己尝试些具体参数的配置。关于 MySQL 官方下载地址： https://dev.mysql.com/downloads/mysql/ 1.2 安装后需要配置哪些内容？ 不管 RPM 还是源码编译安装后，有些东西必须要设置： root 初始密码问题：必须设置密码，如果是自己玩还好，如果是线上系统必须设置密码，要不然就是裸跑系统。 默认安装后会在指定文件中生成，如果忘记或找不到可以对 root 密码进行强制修改： mysqld_safe –skip-grant-tables 2&amp; 用户远程访问问题：从安全性角度默认不允许远程访问，可以进行配置，允许远程访问，但是要注意安全性规范。 grant all privileges on . to ‘root’@’%’ identified by’Password’; flush privileges; UTF-8 编码问题： 关于字符集的问题，可能有些技术人员初次学习数据库时或者初次从事研发工作时，偶尔会碰到，为什么前端信息是正常录入，写入数据库时，变成了乱码？查看数据库的编码方式命令为： show variables like 'character%'; 参数说明： charactersetclient为客户端编码方式； charactersetconnection为建立连接使用的编码； charactersetdatabase数据库的编码； charactersetresults结果集的编码； charactersetserver数据库务器的编码； 1.3 my.cnf 文件初始需要配置哪些内容？ 数据文件位置： 确保数据不会把磁盘空间写满，如果有 ssd，可以充分利用 IO 优势。 日志文件位置： 快速定位错误日志的位置，根据日志排除错误的能力，是程序员的第一生产力。 其他基础参数 Myisam系列参数（表级锁）：事务--锁--？ myisamsortbuffersize = 128M myisammaxsortfilesize = 10G myisammaxextrasortfilesize = 10G myisamrepairthreads = 1 myisam_recover InnoDB系统参数（行级锁？）： innodbadditionalmempoolsize = 16M innodbbufferpoolsize = 2048M innodbdatafilepath = ibdata1:1024M:autoextend innodbfileiothreads = 4 innodbthreadconcurrency = 8 innodbflushlogattrxcommit = 2 innodblogbuffersize = 16M innodblogfilesize = 128M innodblogfilesingroup = 3 innodbmaxdirtypagespct = 90 innodblockwaittimeout = 120 innodbfilepertable = 0 其他参数 [client] port = 3306 socket =","categories":[],"tags":[]},{"title":"表间关系","slug":"表间关系","date":"2017-06-28T13:01:40.000Z","updated":"2019-11-15T12:33:09.136Z","comments":true,"path":"2017/06/28/表间关系/","link":"","permalink":"http://yoursite.com/2017/06/28/%E8%A1%A8%E9%97%B4%E5%85%B3%E7%B3%BB/","excerpt":"","text":"​ 做一个项目，必然是少不了数据库设计的！在学习阶段，基本都是单表。然而在实际开发过程中，一对多，多对多的表处处都是！简单整理一下，一对多，多对多表如何设计整理一下思路： ​ 数据库实体间有三种对应关系：一对一，一对多，多对多。 ​ 一对一关系示例： 一个学生对应一个学生档案材料，或者每个人都有唯一的身份证编号。 ​ 一对多关系示例： 一个学生只属于一个班，但是一个班级有多名学生。 ​ 多对多关系示例： 一个学生可以选择多门课，一门课也有多名学生。 1.一对多关系处理： ​ 通过学生和班级问题了解一对多： ​ 设计数据库表：只需在 学生表 中多添加一个班级号的ID； 注：在数据库中表中初学时，还是通过添加主外键约束，避免删除数据时造成数据混乱！ 2.多对多关系处理： ​ 通过学生选课了解多对多问题的处理： ​ 在多对多中在一个表中添加一个字段就行不通了，所以处理多对多表问题时，就要考虑建立关系表了 例： 学生表： 课程表： 关系表： 注：所以对于多对多表，通过关系表就建立起了两张表的联系！多对多表时建立主外键后，要先删除约束表内容再删除主表内容","categories":[],"tags":[]},{"title":"三类闭包实例理解闭包为什么会占用内存","slug":"三类闭包实例理解闭包为什么会占用内存","date":"2017-06-25T14:16:54.000Z","updated":"2019-11-07T14:30:57.552Z","comments":true,"path":"2017/06/25/三类闭包实例理解闭包为什么会占用内存/","link":"","permalink":"http://yoursite.com/2017/06/25/%E4%B8%89%E7%B1%BB%E9%97%AD%E5%8C%85%E5%AE%9E%E4%BE%8B%E7%90%86%E8%A7%A3%E9%97%AD%E5%8C%85%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/","excerpt":"","text":"在试图弄清这个问题之前，先要理解栈内存、堆内存和预处理。 占用内存，不会销毁的闭包实例例1：123456789var num = 12;function fn() &#123; var num = 100; return function () &#123; console.log(num); &#125;&#125;var f = fn();f(); 例1的图示 未被占用的堆内存才会被销毁 所以，正如图中椭圆形关键点中说明的那样，堆内存xxxfff111被返回给了全局变量f，而全局变量只有在窗口关闭的时候才会销毁，因此堆内存xxxfff111将一直被占用而不会销毁，定义它的局部作用域A也不会被销毁。 例2123456var oDiv = document.getElementById(&quot;div1&quot;);~function() &#123; oDiv.onclick = function() &#123; &#125;&#125;(); 这段代码的特点是：私有作用域给DOM元素的事件绑定一个方法。 例2的图示： 正如图中椭圆形关键点所说，标签对象的属性里面会自带一个onclick的属性，未被赋值时其值为null。那么，在自执行函数执行的时候，其创建的作用域所占用的堆内存xxxfff111同样也会被全局的堆内存xxxfff000占用（这里要注意，是堆内存占用堆内存），所以堆内存xxxfff111和栈内存A都不会被销毁。 不占用内存，立即销毁的实例只需要将例1稍作修改。 例3：1234567function fn()&#123; var num = 100; return function()&#123; console.log(num); &#125;&#125;fn(); //主要修改在这里 例3的图示 由于在函数fn中，xxxfff111是被return的，所以栈内存A的预解释不会处理xxxfff111，它只在fn函数执行的时候才会生成，而函数fn的栈内存A每次被执行之后都会被销毁。 暂时占用内存，延时销毁的闭包实例将例3稍作修改，就变成了延时销毁的闭包实例。 例4： 1234567function fn()&#123; var num = 100; return function()&#123; &#125;&#125;fn()(); //这里到底发生了什么？其实是执行了一次fn之后，把返回的子函数有执行了一次，所以在子函数执行的时候，栈内存fn()是不能销毁的，但是子函数执行完毕后因为没有被占用，所以最终还是要被销毁的，所以最终fn()还是会被销毁的。 例4的图示： 正如途中椭圆形关键点处所说，fn()()的意思是在执行完fn()之后再把返回的值函数执行一遍。因此在子函数执行的时候，堆内存xxxfff111被占用了，相应的栈内存A也将保留。 可堆内存xxxfff111中保存的子函数在执行完成之后还是会被销毁，接着堆内存xxxfff111就作为未被占用的堆内存而被销毁，最终栈内存A也会被销毁。 所以，栈内存在执行完之后会被保留一段时间，这段时间等于其子函数执行的时间。 参考资料： JavaScript高级程序设计(第三版)。","categories":[],"tags":[]},{"title":"hexo如何上传图片","slug":"hexo如何上传图片","date":"2017-05-25T12:03:40.000Z","updated":"2019-11-15T12:36:54.752Z","comments":true,"path":"2017/05/25/hexo如何上传图片/","link":"","permalink":"http://yoursite.com/2017/05/25/hexo%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/","excerpt":"","text":"我之前都是先在CSDN上写好要发布的文章，然后再导出为Markdown文件。然后我就直接将文件复制到_post文件夹下，就行depoly,发布到我的博客网站上，我自己在电脑上浏览是正常的，图片也都能正确的显示出来，但是今天有个评论说不显示图片。我换了手机浏览博客，果然不显示。 解决方法设置站点配置_config.yml:将post_asset_folder: false改为post_asset_folder: true安装插件:npm install https://github.com/CodeFalling/hexo-asset-image – save运行hexo n “XXXXXX”,生成XXXXX.md博文时就会在/source/_posts目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。添加图片:在想添加的位置写入),例如。","categories":[],"tags":[]},{"title":"使用autohotkey修改方向键、回车和启动程序","slug":"使用autohotkey修改方向键、回车和启动程序","date":"2017-04-07T13:34:40.000Z","updated":"2019-11-07T14:30:57.678Z","comments":true,"path":"2017/04/07/使用autohotkey修改方向键、回车和启动程序/","link":"","permalink":"http://yoursite.com/2017/04/07/%E4%BD%BF%E7%94%A8autohotkey%E4%BF%AE%E6%94%B9%E6%96%B9%E5%90%91%E9%94%AE%E3%80%81%E5%9B%9E%E8%BD%A6%E5%92%8C%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"autohotkey官网 autohotkey官方文档 官方文档中文版 具体步骤 下载并安装autohotkey。 在你觉得合适的地方鼠标右键-新建-autohotkey script（脚本）；或者创建一个别的文件，再把后缀改成ahk也可以 一个新建的ahk文档里面会有这些东西 1234#NoEnv ; Recommended for performance and compatibility with future AutoHotkey releases.; #Warn ; Enable warnings to assist with detecting common errors.SendMode Input ; Recommended for new scripts due to its superior speed and reliability.SetWorkingDir %A_ScriptDir% ; Ensures a consistent starting directory. 不用管这些 在下面输入 123456789101112131415!j:: Send, &#123;Down&#125;Return!l:: Send, &#123;Right&#125;Return!h:: Send, &#123;Left&#125;Return!k:: Send, &#123;Up&#125;Return 这几句话是把↑改成了alt+k；↓为alt+j；←为alt+h；→为alt+l。如果想用ctrl代替alt，就把! 换成^ 。其他的+ 代表shift，# 代表windows键，更详细的看这个。如果不需要其他功能了，直接保存并关闭，跳到第 步。 加入修改回车的功能。键盘左侧的Capslock（锁定大小写）键使用频率相对还是不高的，而回车键的位置又有点坑，改之。直接复制这段这两行。 123$CapsLock::EnterLAlt &amp; Capslock::SetCapsLockState, % GetKeyState(&quot;CapsLock&quot;, &quot;T&quot;) ? &quot;Off&quot; : &quot;On&quot; 这样，左侧的Capslock键就成了回车，以后小量的大写字母用shift+字母，如果有大量的大写字母的输入，用alt+Capslock ，跟之前Capslock是一样的。 autohotkey也可以用快捷键启动软件，例如 123!o:: Run, C:\\Program Files\\Everything\\Everything.exeReturn 现在alt+o就是启动everything的快捷键了。同样的，如果想用ctrl代替alt，就把! 换成^ 。其他的+ 代表shift，# 代表windows键，更详细的看这个。如果想启动其他的软件，就把上面的路径换成你想启动的那个软件的路径机就可以了。 保存，关闭 在编辑好的文件点击鼠标右键，选择编译脚本，也可能是Compile script，也可能是Compile脚本，都是一样的。编译之后就会生成一个.exe的文件，把这个文件放到开机启动文件夹中（C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp），每次开机就可以自动启动了。","categories":[],"tags":[]},{"title":"如何在网络公共场合发帖提问","slug":"如何在网络公共场合发帖提问","date":"2017-02-27T13:34:40.000Z","updated":"2019-11-07T14:30:57.382Z","comments":true,"path":"2017/02/27/如何在网络公共场合发帖提问/","link":"","permalink":"http://yoursite.com/2017/02/27/%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BD%91%E7%BB%9C%E5%85%AC%E5%85%B1%E5%9C%BA%E5%90%88%E5%8F%91%E5%B8%96%E6%8F%90%E9%97%AE/","excerpt":"","text":"本文《How To Ask Questions The Smart Way》的学习笔记，仅供参考。 概括的说就是在提问之前先自己尝试解决问题，未能解决，再提问。 提问的根本原则是：让别人指点你，而不是让别人直接给你。 先做好自己的功课提问之前你要先做好下面的事情。 用google搜索。至于为什么要用google和如何用google，大家先去google一下吧。 阅读软件的使用手册。 阅读相关软件的FAQ。 在论坛中搜索。 自己检查和试验。 提问的时候请先表明你已经上一部分所说的那里尝试和努力， 如果你的问题是可以不可以给点提示？、我的这个例子里面缺了什么？或者我应该检查什么地方？ ，那恭喜你已经入门了，如果你一般都是直接问请把我需要的确切过程发给我，那你可能需要更加认真的往下看。 在合适的地方提出合适的问题例如，不要母婴论坛问编程的问题（相信没有人会这样做），不要在全是高手的地方问初级问题，不要重复贴出同样的问题，不要向跟你不熟也没有义务帮助你的人发送私人邮件。 关于网络论坛搞清楚那个论坛是干什么的，搞清楚论坛里面每个版块是干什么的。 写好标题好标题=对象+偏差 对象是出问题的那个东西 偏差是指与你期望不一致的地方 例如： 愚蠢的描述：救命啊！我的电脑不能播放视频啦！ 聪明的描述；X.org 6.8.1的鼠标光标变形，某品牌显卡 MV1005 晶片組。 更聪明的描述：X.org 6.8.1的鼠标光，在某品牌显卡 MV1005 晶片組环境下变形 最后一个例子变形就是偏差，前面的就是对象。 描述问题简洁有效 按时间顺序仔細、清楚地描述你的问题或bug的症狀，不要说你自己的猜测。 描述问题发生的环境（电脑配置、操作系统、软件、以及相关信息），提供经销商的发行版和版本号。 描述在提问前你是怎样去研究和理解這这问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 如果可能的提供一个可以再现这个问题的既定环境的方法 如果是关于代码的问题，注意不要把你上百行的代码全部贴出来，只要贴出出现问题的那个部分就可以了。比如在第七行以后，我希望他得出&lt;x&gt;，但实际的结果却是&lt;y&gt;。 例子： 愚蠢的描述：我在编译内核时接连遇到SIG11错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？ 聪明的描述 ：我组装的电脑（K6/233 CPU、FIC-PA2007 主板威盛 Apollo VP2 芯片组、Corsair PC133 SDRAM 256Mb 内存）最近在开机20分钟左右、做内核编译时频繁地报错，提示SIG11 ，但在头20分钟内从不出问题。重启动不会复位时钟，但会整夜关机。更换所有内存未解决问题，相关的典型编译会话日志附后。 说出目的，而不是你操作过程中的某一个步骤在开头就直接说你的目的是什么 ，然后再陈述你的问题。 经常遇到这样的情况：寻求帮助的人有更进一步的目的，只是在前进的过程中遇到了阻碍，他们提出的问题只针对当下的步骤。其实很有可能不是现在的这一步出了问题，而是你的路径根本就错了。 愚蠢的问题：我怎样才能让某图形程序的颜色拾取器取得十六进制的RGB值？ 聪明的问题 ：我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的RGB值。 语句要清晰、正确、精炼且表达通顺写东西粗心的人，思考和编程也好不到哪去。 花一点时间组织语言，使问题能够正确、清晰地表达出来。 如果你用英语提问，那你要注意拼写、标点和大小写，不要用“u”代替“you”这种简化。 如果你的英语水平不是特别好，在提问的时候可以加上这些。 English is not my native language; please excuse typing errors. If you speak $LANGUAGE, please email/PM me; I may need assistance translating my question. I am familiar with the technical terms, but some slang expressions and idioms are difficult for me. I’ve posted my question in $LANGUAGE and English. I’ll be glad to translate responses, if you only use one or the other. 不要用无意义的话结束提问，比如你能帮助我吗或者这有答案吗？ 。一般来说，避免用是或否 、对或错、 有或没有类型的问句。另外，无论你多着急，也不要在标题里面写“急求”“紧急”等词语。 解决问题后记得回复问题解决之后向所有人发声明说明问题已经解决并感谢所有人。 方式是在标题里面加上已修正、已解决，这样做不但可以让可提供帮助的人不再浪费时间浏览你的问题，也可令有相同问题的人也会更加容易找到你。 之后写一个简单的总结，一个你好，原来时网络线出了问题，谢谢大家！就比什么都不说要好。也可以说一下问题是怎么解决的。 列出那些帮助过你的名字。 对于别人的回复如果看不懂别人的回答，先不要急着回复提问，再执行一次提问之前的步骤。 如果还是不明白…回复的时候要加上自己已经学到了什么。","categories":[],"tags":[]}]}